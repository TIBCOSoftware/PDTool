<?xml version="1.0"?>
<!-- 
######################################################################
# (c) 2017 TIBCO Software Inc. All rights reserved.
# 
# Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
# The details can be found in the file LICENSE.
# 
# The following proprietary files are included as a convenience, and may not be used except pursuant
# to valid license to Composite Information Server or TIBCO(R) Data Virtualization Server:
# csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
# csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
# and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
# are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
# 
# This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
# If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
# agreement with TIBCO.
#
######################################################################
INSTRUCTIONS TO MODIFY:
		1. Search and replace 50 occurrences of "MyProject1SubProj" with your project identifier "MyProject1SubProj".
		     This is the same name provided when copying the plan templates
		2. Search and replace 17 occurrences of "MY DB" with the actual Composite published data source name.
		3. Search and replace 17 occurrences of "MY CATALOG.MY SCHEMA.*" with the actual Composite published catalog and schema if applicable.
		     It could be just CATALOG.* if desired to get all schemas automatically.
		4. Save.
-->
<p1:RegressionModule xmlns:p1="http://www.tibco.com/ps/deploytool/modules" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.cisco.dvbu.com/ps/deploytool/modules file:///C:/MyFiles/git/ASAssets_GIT_Repo/PDTool/resources/schema/PDToolModules.xsd">
	<!-- SMOKE: Generate SQL input file -->
	<regressionTest>
		<id>Test1.1_6.2</id>
		<!-- MyProject1SubProj_SmokeTest_SQL.txt -->
		<inputFilePath>%REGRESSION_TEST_SQL%/%REGRESSION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>yes</createNewFile>
		<newFileParams>
			<createQueries>yes</createQueries>
			<createProcedures>yes</createProcedures>
			<createWS>no</createWS>
			<!-- The soap type specifies whether to generate web services using soap11 (default), soap12 or all.  soap12 is only applicable for CIS 6.1 and higher and only if a CIS New Composite Web Service has been created. -->
			<createSoapType>soap11</createSoapType>
			<!-- Category filter: [yes|no|true|false] Use the default query when generating input file. -->
			<useDefaultViewQuery>yes</useDefaultViewQuery>
			<useDefaultProcQuery>yes</useDefaultProcQuery>
			<useDefaultWSQuery>yes</useDefaultWSQuery>
			<!--  Default queries for Views and Procedures. -->
			<publishedViewQry>SELECT count(*) cnt FROM</publishedViewQry>
			<publishedProcQry>SELECT count(*) cnt FROM</publishedProcQry>
			<!--  If Yes, generate entries for all data sources in the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources>
			<!-- Datasource filter: published datasources for which input file entries are created for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<!--	This is a filter that can be fine-tuned for one or more resources.  If LEFT empty then all resources are compared. 
					A fully qualified resource may be used.  The resource validation is case insensitive.
					A single wildcard may be used before "*.resource", after "resource.*" or in the middle "folder.*.resource". 
					Overlapping resource wild cards will use the highest level specified in this list. 
					It may be used at the catalog or schema level to denote that all resources under that level should be compared.  
					For web services, use the CIS path starting after in the Web Services but excluding [/services/webservices]. 
					   e.g. New Composite Web Service: Folder1.Folder2.WebServiceName.OperationMethod
					   e.g. Legacy Web Service: Folder1.Folder2.WebServiceName.ServiceName.operations.OperationMethod
					Examples of filters for database tables and procedures [the database name is not included in the resource filter]:
						<resource>SCH1.*</resource>
						<resource>CAT1.*.customers</resource>
						<resource>ViewSales</resource>
						<resource>LookupProduct</resource>
					
					Examples of filters for web services [the web service name is included in the resource filter]:
						<resource>testWebService</resource> 				<- this is a legacy web service at the root of the web service folder
						<resource>testWebService_NoParams_bare</resource>	<- new composite web service at the root of the web service folder
						<resource>folder1.*</resource>						<- new composite web service located in the folder1 web service folder		
						<resource>folder2.testWebService*</resource>		<- new composite web service located in folder2 and matching a wild card starting with testWebService	
					-->
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			<defaultProcParamValues>
				<bit>1</bit>
				<varchar>'A'</varchar>
				<char>'a'</char>
				<clob>A</clob>
				<integer>1</integer>
				<int>1</int>
				<bigint>1</bigint>
				<smallint>1</smallint>
				<tinyint>1</tinyint>
				<decimal>1.0</decimal>
				<numeric>1.0</numeric>
				<real>1.0</real>
				<float>1.0</float>
				<double>1.0</double>
				<date>'2011-01-01'</date>
				<time>'00:00:00'</time>
				<timestamp>'2011-01-01 00:00:00'</timestamp>
				<binary>''</binary>
				<varbinary>''</varbinary>
				<blob>''</blob>
				<xml>''</xml>
			</defaultProcParamValues>
		</newFileParams>
	</regressionTest>
	
	<!-- SMOKE: Generate SQL input file using TOP command -->
	<regressionTest>
		<id>Test1.1_TOP_6.2</id>
		<!-- MyProject1SubProj_SmokeTest_SQL_TOP.txt -->
		<inputFilePath>%REGRESSION_TEST_SQL%/%REGRESSION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>yes</createNewFile>
		<newFileParams>
			<createQueries>yes</createQueries>
			<createProcedures>yes</createProcedures>
			<createWS>no</createWS>
			<!-- The soap type specifies whether to generate web services using soap11 (default), soap12 or all.  soap12 is only applicable for CIS 6.1 and higher and only if a CIS New Composite Web Service has been created. -->
			<createSoapType>soap11</createSoapType>
			<!-- Category filter: [yes|no|true|false] Use the default query when generating input file. -->
			<useDefaultViewQuery>yes</useDefaultViewQuery>
			<useDefaultProcQuery>yes</useDefaultProcQuery>
			<useDefaultWSQuery>yes</useDefaultWSQuery>
			<!--  Default queries for Views and Procedures. -->
			<publishedViewQry>SELECT TOP 1 * FROM</publishedViewQry>
			<publishedProcQry>SELECT TOP 1 * FROM</publishedProcQry>
			<!--  If Yes, generate entries for all data sources in the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources>
			<!-- Datasource filter: published datasources for which input file entries are created for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			<defaultProcParamValues>
				<bit>1</bit>
				<varchar>'A'</varchar>
				<char>'a'</char>
				<clob>A</clob>
				<integer>1</integer>
				<int>1</int>
				<bigint>1</bigint>
				<smallint>1</smallint>
				<tinyint>1</tinyint>
				<decimal>1.0</decimal>
				<numeric>1.0</numeric>
				<real>1.0</real>
				<float>1.0</float>
				<double>1.0</double>
				<date>'2011-01-01'</date>
				<time>'00:00:00'</time>
				<timestamp>'2011-01-01 00:00:00'</timestamp>
				<binary>''</binary>
				<varbinary>''</varbinary>
				<blob>''</blob>
				<xml>''</xml>
			</defaultProcParamValues>
		</newFileParams>
	</regressionTest>

	<!-- SMOKE: Generate SQL input file -->
	<regressionTest>
		<id>Test1.1_7.0</id>
		<!-- MyProject1SubProj_SmokeTest_SQL.txt -->
		<inputFilePath>%REGRESSION_TEST_SQL%/%REGRESSION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>yes</createNewFile>
		<newFileParams>
			<createQueries>yes</createQueries>
			<createProcedures>yes</createProcedures>
			<createWS>no</createWS>
			<!-- The soap type specifies whether to generate web services using soap11 (default), soap12 or all.  soap12 is only applicable for CIS 6.1 and higher and only if a CIS New Composite Web Service has been created. -->
			<createSoapType>soap11</createSoapType>
			<!-- Category filter: [yes|no|true|false] Use the default query when generating input file. -->
			<useDefaultViewQuery>yes</useDefaultViewQuery>
			<useDefaultProcQuery>yes</useDefaultProcQuery>
			<useDefaultWSQuery>yes</useDefaultWSQuery>
			<!--  Default queries for Views and Procedures. -->
			<publishedViewQry>SELECT count(*) cnt FROM</publishedViewQry>
			<publishedProcQry>SELECT count(*) cnt FROM</publishedProcQry>
			<!--  If Yes, generate entries for all data sources in the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources>
			<!-- Datasource filter: published datasources for which input file entries are created for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<!--	This is a filter that can be fine-tuned for one or more resources.  If LEFT empty then all resources are compared. 
					A fully qualified resource may be used.  The resource validation is case insensitive.
					A single wildcard may be used before "*.resource", after "resource.*" or in the middle "folder.*.resource". 
					Overlapping resource wild cards will use the highest level specified in this list. 
					It may be used at the catalog or schema level to denote that all resources under that level should be compared.  
					For web services, use the CIS path starting after in the Web Services but excluding [/services/webservices]. 
					   e.g. New Composite Web Service: Folder1.Folder2.WebServiceName.OperationMethod
					   e.g. Legacy Web Service: Folder1.Folder2.WebServiceName.ServiceName.operations.OperationMethod
					Examples of filters for database tables and procedures [the database name is not included in the resource filter]:
						<resource>SCH1.*</resource>
						<resource>CAT1.*.customers</resource>
						<resource>ViewSales</resource>
						<resource>LookupProduct</resource>
					
					Examples of filters for web services [the web service name is included in the resource filter]:
						<resource>testWebService</resource> 				<- this is a legacy web service at the root of the web service folder
						<resource>testWebService_NoParams_bare</resource>	<- new composite web service at the root of the web service folder
						<resource>folder1.*</resource>						<- new composite web service located in the folder1 web service folder		
						<resource>folder2.testWebService*</resource>		<- new composite web service located in folder2 and matching a wild card starting with testWebService	
					-->
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			<defaultProcParamValues>
				<bit>1</bit>
				<varchar>'A'</varchar>
				<char>'a'</char>
				<clob>A</clob>
				<integer>1</integer>
				<int>1</int>
				<bigint>1</bigint>
				<smallint>1</smallint>
				<tinyint>1</tinyint>
				<decimal>1.0</decimal>
				<numeric>1.0</numeric>
				<real>1.0</real>
				<float>1.0</float>
				<double>1.0</double>
				<date>'2011-01-01'</date>
				<time>'00:00:00'</time>
				<timestamp>'2011-01-01 00:00:00'</timestamp>
				<binary>''</binary>
				<varbinary>''</varbinary>
				<blob>''</blob>
				<xml>''</xml>
			</defaultProcParamValues>
		</newFileParams>
	</regressionTest>
	
	<!-- SMOKE: Generate SQL input file using TOP command -->
	<regressionTest>
		<id>Test1.1_TOP_7.0</id>
		<!-- MyProject1SubProj_SmokeTest_SQL_TOP.txt -->
		<inputFilePath>%REGRESSION_TEST_SQL%/%REGRESSION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>yes</createNewFile>
		<newFileParams>
			<createQueries>yes</createQueries>
			<createProcedures>yes</createProcedures>
			<createWS>no</createWS>
			<!-- The soap type specifies whether to generate web services using soap11 (default), soap12 or all.  soap12 is only applicable for CIS 6.1 and higher and only if a CIS New Composite Web Service has been created. -->
			<createSoapType>soap11</createSoapType>
			<!-- Category filter: [yes|no|true|false] Use the default query when generating input file. -->
			<useDefaultViewQuery>yes</useDefaultViewQuery>
			<useDefaultProcQuery>yes</useDefaultProcQuery>
			<useDefaultWSQuery>yes</useDefaultWSQuery>
			<!--  Default queries for Views and Procedures. -->
			<publishedViewQry>SELECT TOP 1 * FROM</publishedViewQry>
			<publishedProcQry>SELECT TOP 1 * FROM</publishedProcQry>
			<!--  If Yes, generate entries for all data sources in the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources>
			<!-- Datasource filter: published datasources for which input file entries are created for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			<defaultProcParamValues>
				<bit>1</bit>
				<varchar>'A'</varchar>
				<char>'a'</char>
				<clob>A</clob>
				<integer>1</integer>
				<int>1</int>
				<bigint>1</bigint>
				<smallint>1</smallint>
				<tinyint>1</tinyint>
				<decimal>1.0</decimal>
				<numeric>1.0</numeric>
				<real>1.0</real>
				<float>1.0</float>
				<double>1.0</double>
				<date>'2011-01-01'</date>
				<time>'00:00:00'</time>
				<timestamp>'2011-01-01 00:00:00'</timestamp>
				<binary>''</binary>
				<varbinary>''</varbinary>
				<blob>''</blob>
				<xml>''</xml>
			</defaultProcParamValues>
		</newFileParams>
	</regressionTest>

	<!-- SMOKE: Execute first test.  This is the default smoke test behavior for "functional". -->
	<regressionTest>
		<id>Test1.2_6.2</id>
		<!-- MyProject1SubProj_SmokeTest_SQL$CUSTOM$.txt -->
		<inputFilePath>%REGRESSION_TEST_SQL%/%REGRESSION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>no</createNewFile>
		<testRunParams>
			<!-- Type of test: [functional|migration|performance] 
				functional - Only execute the default query against a table or procedure.  For a web service it is whatever input is provided.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	If the input file contains a full query, it will be rewritten using the FROM clause to use the default queries described in the <newFileParams> section
				functional_as_is - Execute the full query, procedure or a web service "as is" with whatever input is provided in the input file.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	Queries and Procedures are NOT rewritten using the FROM clause to use the default queries described in the "newFileParams" section
				migration - A full query like "select * from <table> where <where_clause>" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality.
				regression - A full query like "select * from {table} where {where_clause}" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality. 
								Note: functionally the same as migration but provided as a way of documenting the test type.								
				performance - A full query like "select * from <table> where <where_clause>" is executed repeatedly on multiple threads for a specified duration of time to capture results.	
								A performance test does not write results to an output file.  It is only concerned with gathering statistics on executions.	
				security - A query is provided to test the security privileges for a given user.
			-->
			<testType>functional</testType>
			<!-- Test run results are written to this log file. -->
			<logFilePath>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_SmokeTest$CUSTOM$.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>
			<!-- Base directory for output data files  -->
			<baseDir>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_SmokeTest$CUSTOM$</baseDir>
			<!-- Output data file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<delimiter>PIPE</delimiter>
			<!-- Print output: [verbose,summary,silent] verbose=print summary and results, summary=print query context, silent=nothing is printed to the command line. -->
			<printOutput>summary</printOutput>

			<!-- Category filter:  Turn of/off the execution of an entire category. -->
			<runQueries>yes</runQueries>
			<runProcedures>yes</runProcedures>
			<runWS>yes</runWS>
			<!--  If Yes, run tests for all data sources FROM the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources>
			<!-- Datasource filter: published datasources for which tests are run for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<!-- Comment out to get all queries in the input file
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			-->
		</testRunParams>
	</regressionTest>

	<!-- SMOKE: Execute first test.  This is the default smoke test behavior for "functional". -->
	<regressionTest>
		<id>Test1.2_7.0</id>
		<!-- MyProject1SubProj_SmokeTest_SQL$CUSTOM$.txt -->
		<inputFilePath>%REGRESSION_TEST_SQL%/%REGRESSION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>no</createNewFile>
		<testRunParams>
			<!-- Type of test: [functional|migration|performance] 
				functional - Only execute the default query against a table or procedure.  For a web service it is whatever input is provided.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	If the input file contains a full query, it will be rewritten using the FROM clause to use the default queries described in the <newFileParams> section
				functional_as_is - Execute the full query, procedure or a web service "as is" with whatever input is provided in the input file.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	Queries and Procedures are NOT rewritten using the FROM clause to use the default queries described in the "newFileParams" section
				migration - A full query like "select * from <table> where <where_clause>" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality.
				regression - A full query like "select * from {table} where {where_clause}" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality. 
								Note: functionally the same as migration but provided as a way of documenting the test type.								
				performance - A full query like "select * from <table> where <where_clause>" is executed repeatedly on multiple threads for a specified duration of time to capture results.	
								A performance test does not write results to an output file.  It is only concerned with gathering statistics on executions.	
				security - A query is provided to test the security privileges for a given user.
			-->
			<testType>functional</testType>
			<!-- Test run results are written to this log file. -->
			<logFilePath>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_SmokeTest$CUSTOM$.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>
			<!-- Base directory for output data files  -->
			<baseDir>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_SmokeTest$CUSTOM$</baseDir>
			<!-- Output data file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<delimiter>PIPE</delimiter>
			<!-- Print output: [verbose,summary,silent] verbose=print summary and results, summary=print query context, silent=nothing is printed to the command line. -->
			<printOutput>summary</printOutput>

			<!-- Category filter:  Turn of/off the execution of an entire category. -->
			<runQueries>yes</runQueries>
			<runProcedures>yes</runProcedures>
			<runWS>yes</runWS>
			<!--  If Yes, run tests for all data sources FROM the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources>
			<!-- Datasource filter: published datasources for which tests are run for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<!-- Comment out to get all queries in the input file
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			-->
		</testRunParams>
	</regressionTest>

	<!-- SMOKE AS IS: Execute first test.  This is a new capability that allows executing SQL input file as is. -->
	<regressionTest>
		<id>Test1.3_6.2</id>
		<!-- MyProject1SubProj_SmokeTest_SQL$CUSTOM$.txt -->
		<inputFilePath>%REGRESSION_TEST_SQL%/%REGRESSION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>no</createNewFile>
		<testRunParams>
			<!-- Type of test: [functional|migration|performance] 
				functional - Only execute the default query against a table or procedure.  For a web service it is whatever input is provided.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	If the input file contains a full query, it will be rewritten using the FROM clause to use the default queries described in the <newFileParams> section
				functional_as_is - Execute the full query, procedure or a web service "as is" with whatever input is provided in the input file.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	Queries and Procedures are NOT rewritten using the FROM clause to use the default queries described in the "newFileParams" section
				migration - A full query like "select * from <table> where <where_clause>" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality.
				regression - A full query like "select * from {table} where {where_clause}" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality. 
								Note: functionally the same as migration but provided as a way of documenting the test type.								
				performance - A full query like "select * from <table> where <where_clause>" is executed repeatedly on multiple threads for a specified duration of time to capture results.	
								A performance test does not write results to an output file.  It is only concerned with gathering statistics on executions.	
				security - A query is provided to test the security privileges for a given user.
			-->
			<testType>functional_as_is</testType>
			<!-- Test run results are written to this log file. -->
			<logFilePath>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_SmokeTestAsIs$CUSTOM$.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>
			<!-- Base directory for output data files  -->
			<baseDir>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_SmokeTestAsIs$CUSTOM$</baseDir>
			<!-- Output data file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<delimiter>PIPE</delimiter>
			<!-- Print output: [verbose,summary,silent] verbose=print summary and results, summary=print query context, silent=nothing is printed to the command line. -->
			<printOutput>summary</printOutput>

			<!-- Category filter:  Turn of/off the execution of an entire category. -->
			<runQueries>yes</runQueries>
			<runProcedures>yes</runProcedures>
			<runWS>yes</runWS>
			<!--  If Yes, run tests for all data sources FROM the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources>
			<!-- Datasource filter: published datasources for which tests are run for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<!-- Comment out to get all queries in the input file
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			-->
		</testRunParams>
	</regressionTest>

	<!-- SMOKE AS IS: Execute first test.  This is a new capability that allows executing SQL input file as is. -->
	<regressionTest>
		<id>Test1.3_7.0</id>
		<!-- MyProject1SubProj_SmokeTest_SQL$CUSTOM$.txt -->
		<inputFilePath>%REGRESSION_TEST_SQL%/%REGRESSION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>no</createNewFile>
		<testRunParams>
			<!-- Type of test: [functional|migration|performance] 
				functional - Only execute the default query against a table or procedure.  For a web service it is whatever input is provided.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	If the input file contains a full query, it will be rewritten using the FROM clause to use the default queries described in the <newFileParams> section
				functional_as_is - Execute the full query, procedure or a web service "as is" with whatever input is provided in the input file.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	Queries and Procedures are NOT rewritten using the FROM clause to use the default queries described in the "newFileParams" section
				migration - A full query like "select * from <table> where <where_clause>" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality.
				regression - A full query like "select * from {table} where {where_clause}" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality. 
								Note: functionally the same as migration but provided as a way of documenting the test type.								
				performance - A full query like "select * from <table> where <where_clause>" is executed repeatedly on multiple threads for a specified duration of time to capture results.	
								A performance test does not write results to an output file.  It is only concerned with gathering statistics on executions.	
				security - A query is provided to test the security privileges for a given user.
			-->
			<testType>functional_as_is</testType>
			<!-- Test run results are written to this log file. -->
			<logFilePath>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_SmokeTestAsIs$CUSTOM$.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>
			<!-- Base directory for output data files  -->
			<baseDir>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_SmokeTestAsIs$CUSTOM$</baseDir>
			<!-- Output data file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<delimiter>PIPE</delimiter>
			<!-- Print output: [verbose,summary,silent] verbose=print summary and results, summary=print query context, silent=nothing is printed to the command line. -->
			<printOutput>summary</printOutput>

			<!-- Category filter:  Turn of/off the execution of an entire category. -->
			<runQueries>yes</runQueries>
			<runProcedures>yes</runProcedures>
			<runWS>yes</runWS>
			<!--  If Yes, run tests for all data sources FROM the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources>
			<!-- Datasource filter: published datasources for which tests are run for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<!-- Comment out to get all queries in the input file
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			-->
		</testRunParams>
	</regressionTest>
	
	
	<!-- REGRESSION: Execute first test -->
	<regressionTest>
		<id>Test2.1_6.2</id>
		<!-- MyProject1SubProj_RegressionTest_SQL$CUSTOM$.txt -->
		<inputFilePath>%REGRESSION_TEST_SQL%/%REGRESSION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>no</createNewFile>
			
		<testRunParams>
			<!-- Type of test: [functional|migration|performance] 
				functional - Only execute the default query against a table or procedure.  For a web service it is whatever input is provided.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	If the input file contains a full query, it will be rewritten using the FROM clause to use the default queries described in the <newFileParams> section
				functional_as_is - Execute the full query, procedure or a web service "as is" with whatever input is provided in the input file.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	Queries and Procedures are NOT rewritten using the FROM clause to use the default queries described in the "newFileParams" section
				migration - A full query like "select * from <table> where <where_clause>" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality.
				regression - A full query like "select * from {table} where {where_clause}" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality. 
								Note: functionally the same as migration but provided as a way of documenting the test type.								
				performance - A full query like "select * from <table> where <where_clause>" is executed repeatedly on multiple threads for a specified duration of time to capture results.	
								A performance test does not write results to an output file.  It is only concerned with gathering statistics on executions.	
				security - A query is provided to test the security privileges for a given user.
			-->
			<testType>regression</testType>
			
			<!-- Comparison results are written to this log file. -->
			<logFilePath>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_RegressionTest$CUSTOM$.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>
			
			<!-- Base directory for output data files  -->
			<baseDir>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_RegressionTest$CUSTOM$</baseDir>
			<!-- Output data file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<delimiter>PIPE</delimiter>
			<!-- Print output to command line: [verbose,summary,silent] verbose=print summary and results, summary=print query context, silent=nothing is printed to the command line. -->
			<printOutput>summary</printOutput>
		
			<!-- Category filter:  Turn of/off the execution of an entire category. -->
			<runQueries>yes</runQueries>
			<runProcedures>yes</runProcedures>
			<runWS>yes</runWS>
			<!--  If Yes, run tests for all data sources FROM the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources> 
			<!-- Datasource filter: published datasources for which tests are run for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>	
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<!-- Comment out to get all queries in the input file
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			-->
		</testRunParams>
	</regressionTest>
	
	<!-- REGRESSION: Execute second test -->
	<regressionTest>
		<id>Test2.1_7.0</id>
		<!-- MyProject1SubProj_RegressionTest_SQL$CUSTOM$.txt -->
		<inputFilePath>%REGRESSION_TEST_SQL%/%REGRESSION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>no</createNewFile>
			
		<testRunParams>
			<!-- Type of test: [functional|migration|performance] 
				functional - Only execute the default query against a table or procedure.  For a web service it is whatever input is provided.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	If the input file contains a full query, it will be rewritten using the FROM clause to use the default queries described in the <newFileParams> section
				functional_as_is - Execute the full query, procedure or a web service "as is" with whatever input is provided in the input file.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	Queries and Procedures are NOT rewritten using the FROM clause to use the default queries described in the "newFileParams" section
				migration - A full query like "select * from <table> where <where_clause>" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality.
				regression - A full query like "select * from {table} where {where_clause}" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality. 
								Note: functionally the same as migration but provided as a way of documenting the test type.								
				performance - A full query like "select * from <table> where <where_clause>" is executed repeatedly on multiple threads for a specified duration of time to capture results.	
								A performance test does not write results to an output file.  It is only concerned with gathering statistics on executions.	
				security - A query is provided to test the security privileges for a given user.
			-->
			<testType>regression</testType>
			
			<!-- Comparison results are written to this log file. -->
			<logFilePath>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_RegressionTest$CUSTOM$.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>
			
			<!-- Base directory for output data files  -->
			<baseDir>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_RegressionTest$CUSTOM$</baseDir>
			<!-- Output data file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<delimiter>PIPE</delimiter>
			<!-- Print output to command line: [verbose,summary,silent] verbose=print summary and results, summary=print query context, silent=nothing is printed to the command line. -->
			<printOutput>summary</printOutput>
		
			<!-- Category filter:  Turn of/off the execution of an entire category. -->
			<runQueries>yes</runQueries>
			<runProcedures>yes</runProcedures>
			<runWS>yes</runWS>
			<!--  If Yes, run tests for all data sources FROM the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources> 
			<!-- Datasource filter: published datasources for which tests are run for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>	
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<!-- Comment out to get all queries in the input file
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			-->
		</testRunParams>
	</regressionTest>

	<!-- REGRESSION: Compare files and compare logs -->
	<regressionTest>
		<id>Test2.2_6.2</id>
		<inputFilePath>%REGRESSION_TEST_SQL%/%REGRESSION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>no</createNewFile>
			
		<compareFiles>
			<!-- Comparison results are written to this log file. -->
			<logFilePath>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_RegressionTest_CompareFiles$CUSTOM$.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>

			<!-- These are the two base directories FROM which the files will be retrieved from.  They represent the two instances of the regression execution tests and two different points in time. -->
			<baseDir1>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_RegressionTest$CUSTOM$</baseDir1>
			<baseDir2>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER2/$ENV_TYPE$_RegressionTest$CUSTOM$</baseDir2>

			<!-- Category filter: This informs the Regression Module whether to perform the comparison for Queries, Procedure and Web Services.  It is a way of turning comparison on and off for an entire category of resources. -->
			<compareQueries>yes</compareQueries>
			<compareProcedures>yes</compareProcedures>
			<compareWS>yes</compareWS>
			
			<!--  If Yes, run comparisons for all data sources FROM the input file. datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources> 
			<!-- Datasource filter: published datasources for which comparisons are run for JDBC and Web Services datasources -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>	
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<!-- Comment out to get all queries in the input file
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			-->
		</compareFiles>		
		
		<compareLogs>
			<!-- Comparison results are written to this log file. -->
			<logFilePath>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_RegressionTest_CompareLogs$CUSTOM$.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>

			<!-- These are the two summary execution log files to be compared. -->
			<logFilePath1>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_RegressionTest$CUSTOM$.log</logFilePath1>
			<logFilePath2>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER2/$ENV_TYPE$_RegressionTest$CUSTOM$.log</logFilePath2>

			<!-- Log file 1 and 2 delimiters [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter1>PIPE</logDelimiter1>
			<logDelimiter2>PIPE</logDelimiter2>

			<!-- Default duration delta for all queries.  When the difference between duration in file2 and file1 is greater than the default duration then it is an error (outside acceptable range). -->
			<durationDelta>000 00:00:01.0000</durationDelta>
		</compareLogs>
	</regressionTest>

	<!-- REGRESSION: Compare files and compare logs -->
	<regressionTest>
		<id>Test2.2_7.0</id>
		<inputFilePath>%REGRESSION_TEST_SQL%/%REGRESSION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>no</createNewFile>
			
		<compareFiles>
			<!-- Comparison results are written to this log file. -->
			<logFilePath>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_RegressionTest_CompareFiles$CUSTOM$.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>

			<!-- These are the two base directories FROM which the files will be retrieved from.  They represent the two instances of the regression execution tests and two different points in time. -->
			<baseDir1>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_RegressionTest$CUSTOM$</baseDir1>
			<baseDir2>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER2/$ENV_TYPE$_RegressionTest$CUSTOM$</baseDir2>

			<!-- Category filter: This informs the Regression Module whether to perform the comparison for Queries, Procedure and Web Services.  It is a way of turning comparison on and off for an entire category of resources. -->
			<compareQueries>yes</compareQueries>
			<compareProcedures>yes</compareProcedures>
			<compareWS>yes</compareWS>
			
			<!--  If Yes, run comparisons for all data sources FROM the input file. datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources> 
			<!-- Datasource filter: published datasources for which comparisons are run for JDBC and Web Services datasources -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>	
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<!-- Comment out to get all queries in the input file
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			-->
		</compareFiles>		
		
		<compareLogs>
			<!-- Comparison results are written to this log file. -->
			<logFilePath>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_RegressionTest_CompareLogs$CUSTOM$.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>

			<!-- These are the two summary execution log files to be compared. -->
			<logFilePath1>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_RegressionTest$CUSTOM$.log</logFilePath1>
			<logFilePath2>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER2/$ENV_TYPE$_RegressionTest$CUSTOM$.log</logFilePath2>

			<!-- Log file 1 and 2 delimiters [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter1>PIPE</logDelimiter1>
			<logDelimiter2>PIPE</logDelimiter2>

			<!-- Default duration delta for all queries.  When the difference between duration in file2 and file1 is greater than the default duration then it is an error (outside acceptable range). -->
			<durationDelta>000 00:00:01.0000</durationDelta>
		</compareLogs>
	</regressionTest>
	
	<!-- PERFORMANCE: Execute first test -->
	<regressionTest>
		<id>Test3.1_6.2</id>
		<!-- MyProject1SubProj_PerfTest_SQL$CUSTOM$.txt -->
		<inputFilePath>%REGRESSION_TEST_SQL%/%REGRESSION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>yes</createNewFile>
			
		<testRunParams>
			<!-- Type of test: [functional|migration|performance] 
				functional - Only execute the default query against a table or procedure.  For a web service it is whatever input is provided.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	If the input file contains a full query, it will be rewritten using the FROM clause to use the default queries described in the <newFileParams> section
				functional_as_is - Execute the full query, procedure or a web service "as is" with whatever input is provided in the input file.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	Queries and Procedures are NOT rewritten using the FROM clause to use the default queries described in the "newFileParams" section
				migration - A full query like "select * from <table> where <where_clause>" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality.
				regression - A full query like "select * from {table} where {where_clause}" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality. 
								Note: functionally the same as migration but provided as a way of documenting the test type.								
				performance - A full query like "select * from <table> where <where_clause>" is executed repeatedly on multiple threads for a specified duration of time to capture results.	
								A performance test does not write results to an output file.  It is only concerned with gathering statistics on executions.	
				security - A query is provided to test the security privileges for a given user.
			-->
			<testType>performance</testType>

			<!-- Comparison results are written to this log file. -->
			<logFilePath>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_PerfTest$CUSTOM$.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>
			
			<!-- Base directory for output data files  -->
			<baseDir>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_PerfTest$CUSTOM$</baseDir>
			<!-- Output data file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<delimiter>PIPE</delimiter>
			<!-- Print output to command line: [verbose,summary,silent] verbose=print summary and results, summary=print query context, silent=nothing is printed to the command line. -->
			<printOutput>summary</printOutput>
			<!-- (Optional) The number of threads to create when doing performance testing. -->
			<perfTestThreads>5</perfTestThreads>
			<!-- (Optional) The duration in seconds to execute the performance test for. -->
			<perfTestDuration>60</perfTestDuration>
			<!-- (Optional) The number of seconds to sleep in between printing stats when executing the performance test. -->
			<perfTestSleepPrint>1</perfTestSleepPrint>
			<!-- (Optional) The number of seconds to sleep in between query executions when executing the performance test. -->
			<perfTestSleepExec>0</perfTestSleepExec>

			<!-- Category filter:  Turn of/off the execution of an entire category. -->
			<runQueries>yes</runQueries>
			<runProcedures>yes</runProcedures>
			<runWS>yes</runWS>
			<!--  If Yes, run tests for all data sources FROM the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources> 
			<!-- Datasource filter: published datasources for which tests are run for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>	
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<!-- Comment out to get all queries in the input file
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			-->
		</testRunParams>	
	</regressionTest>

	<!-- PERFORMANCE: Execute second test -->
	<regressionTest>
		<id>Test3.1_7.0</id>
		<!-- MyProject1SubProj_PerfTest_SQL$CUSTOM$.txt -->
		<inputFilePath>%REGRESSION_TEST_SQL%/%REGRESSION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>yes</createNewFile>
			
		<testRunParams>
			<!-- Type of test: [functional|migration|performance] 
				functional - Only execute the default query against a table or procedure.  For a web service it is whatever input is provided.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	If the input file contains a full query, it will be rewritten using the FROM clause to use the default queries described in the <newFileParams> section
				functional_as_is - Execute the full query, procedure or a web service "as is" with whatever input is provided in the input file.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	Queries and Procedures are NOT rewritten using the FROM clause to use the default queries described in the "newFileParams" section
				migration - A full query like "select * from <table> where <where_clause>" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality.
				regression - A full query like "select * from {table} where {where_clause}" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality. 
								Note: functionally the same as migration but provided as a way of documenting the test type.								
				performance - A full query like "select * from <table> where <where_clause>" is executed repeatedly on multiple threads for a specified duration of time to capture results.	
								A performance test does not write results to an output file.  It is only concerned with gathering statistics on executions.	
				security - A query is provided to test the security privileges for a given user.
			-->
			<testType>performance</testType>

			<!-- Comparison results are written to this log file. -->
			<logFilePath>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_PerfTest$CUSTOM$.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>
			
			<!-- Base directory for output files  -->
			<baseDir>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_PerfTest$CUSTOM$</baseDir>
			<!-- Output data file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<delimiter>PIPE</delimiter>
			<!-- Print output to command line: [verbose,summary,silent] verbose=print summary and results, summary=print query context, silent=nothing is printed to the command line. -->
			<printOutput>summary</printOutput>
			<!-- (Optional) The number of threads to create when doing performance testing. -->
			<perfTestThreads>5</perfTestThreads>
			<!-- (Optional) The duration in seconds to execute the performance test for. -->
			<perfTestDuration>60</perfTestDuration>
			<!-- (Optional) The number of seconds to sleep in between printing stats when executing the performance test. -->
			<perfTestSleepPrint>1</perfTestSleepPrint>
			<!-- (Optional) The number of seconds to sleep in between query executions when executing the performance test. -->
			<perfTestSleepExec>0</perfTestSleepExec>

			<!-- Category filter:  Turn of/off the execution of an entire category. -->
			<runQueries>yes</runQueries>
			<runProcedures>yes</runProcedures>
			<runWS>yes</runWS>
			<!--  If Yes, run tests for all data sources FROM the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources> 
			<!-- Datasource filter: published datasources for which tests are run for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>	
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<!-- Comment out to get all queries in the input file
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			-->
		</testRunParams>
	</regressionTest>

	<!-- PERFORMANCE: Compare logs -->
	<regressionTest>
		<id>Test3.2_6.2</id>
		<inputFilePath>%REGRESSION_TEST_SQL%/%REGRESSION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>yes</createNewFile>
	
		<compareLogs>
			<!-- Comparison results are written to this log file. -->
			<logFilePath>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_PerfTest_CompareLogs$CUSTOM$.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>

			<!-- These are the two summary execution log files to be compared. -->
			<logFilePath1>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_PerfTest$CUSTOM$.log</logFilePath1>
			<logFilePath2>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER2/$ENV_TYPE$_PerfTest$CUSTOM$.log</logFilePath2>

			<!-- Log file 1 and 2 delimiters [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter1>PIPE</logDelimiter1>
			<logDelimiter2>PIPE</logDelimiter2>

			<!-- Default duration delta for all queries.  When the difference between duration in file2 and file1 is greater than the default duration then it is an error (outside acceptable range). -->
			<durationDelta>000 00:00:01.0000</durationDelta>
		</compareLogs>
	</regressionTest>
	
	<!-- PERFORMANCE: Compare logs -->
	<regressionTest>
		<id>Test3.2_7.0</id>
		<inputFilePath>%REGRESSION_TEST_SQL%/%REGRESSION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>yes</createNewFile>
	
		<compareLogs>
			<!-- Comparison results are written to this log file. -->
			<logFilePath>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_PerfTest_CompareLogs$CUSTOM$.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>

			<!-- These are the two summary execution log files to be compared. -->
			<logFilePath1>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_PerfTest$CUSTOM$.log</logFilePath1>
			<logFilePath2>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER2/$ENV_TYPE$_PerfTest$CUSTOM$.log</logFilePath2>

			<!-- Log file 1 and 2 delimiters [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter1>PIPE</logDelimiter1>
			<logDelimiter2>PIPE</logDelimiter2>

			<!-- Default duration delta for all queries.  When the difference between duration in file2 and file1 is greater than the default duration then it is an error (outside acceptable range). -->
			<durationDelta>000 00:00:01.0000</durationDelta>
		</compareLogs>
	</regressionTest>

	<!-- SECURITY TOP: Generate <newFileParams> and Execute <tesRunParams> test --> 
	<!--    Only the "SELECT TOP 1" query will be used for the security test instead of "SELECT COUNT(1)" for three reasons:
				1. It is more efficient and select count(*).
				2. It simplifies this XML by only having 1 entry.
				3. Only simple queries are needed for security testing.
	-->
	<regressionTest>
		<id>Test4.1_6.2</id>
		<!-- the inputFilePath and createNewFile are ignored for the security test -->
		<inputFilePath></inputFilePath>
		<tempDirPath>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj</tempDirPath>
		<createNewFile>no</createNewFile>

		<!-- SECURITY: Generate test --> 
		<newFileParams>
			<createQueries>yes</createQueries>
			<createProcedures>yes</createProcedures>
			<createWS>yes</createWS>
			<!-- The soap type specifies whether to generate web services using soap11 (default), soap12 or all.  soap12 is only applicable for CIS 6.1 and higher and only if a CIS New Composite Web Service has been created. -->
			<createSoapType>soap11</createSoapType>
			<!-- Category filter: [yes|no|true|false] Use the default query when generating input file. -->
			<useDefaultViewQuery>yes</useDefaultViewQuery>
			<useDefaultProcQuery>yes</useDefaultProcQuery>
			<useDefaultWSQuery>yes</useDefaultWSQuery>
			<!--  Default queries for Views and Procedures. -->
			<publishedViewQry>SELECT TOP 1 * FROM</publishedViewQry>
			<publishedProcQry>SELECT TOP 1 * FROM</publishedProcQry>
			<!--  If Yes, generate entries for all data sources in the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources>
			<!-- Datasource filter: published datasources for which tests are run for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>	
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
		  
		  <!-- Options for generating the Regression Security XML section. -->
		  <securityGenerationOptions>
			<!--Path to Target Regression Module XML - a required path to the target configuration file for the regression module.  Provides a way of writing to a different file than the source or original RegressionModule.xml.-->
			<pathToTargetRegressionXML>%REGRESSION_TEST_HOME%/modules/generated/MyProject1SubProj_RegressionModule_gen.xml</pathToTargetRegressionXML>
			<!--[optional] A security user default encrypted password.  [node="regressionSecurityUser"] It will be encrypted when the ExecutePDTool.bat -encrypt ..\resources\modules\RegressionModule.xml is executed.-->
			<encryptedPassword>password</encryptedPassword>
			<!--[optional] Determines what CIS users to generate.  Wildcards (*) may be used.  [node="regressionSecurityUser"]-->
			<userFilter>user1,user2</userFilter>
			<!--[optional] Provides a way of specifying what domain the userFilter should be applied to.  [node="regressionSecurityUser"]-->
			<domainFilter>composite</domainFilter>
			<!--[NOEXEC|OVERWRITE|APPEND] - NOEXEC (default)=do nothing, don't execute. OVERWRITE=overwrite existing security user XML, APPEND=add to existing security user XML if the user does not exist.  [node="regressionSecurityUser"]-->
			<userMode>OVERWRITE</userMode>
			<!--[NOEXEC|OVERWRITE|APPEND] - NOEXEC (default)=do nothing, don't execute. OVERWRITE=overwrite existing security query XML, APPEND=add to existing security query XML if the query does not exist.  [node="regressionSecurityQuery"-->
			<queryMode>OVERWRITE</queryMode>
			<!--[NOEXEC|OVERWRITE|APPEND] - NOEXEC (default)=do nothing, don't execute. OVERWRITE=overwrite existing security plan XML, APPEND=add to existing security plan XML if the plan does not exist.  [node="regressionSecurityPlanTest"]-->
			<planMode>OVERWRITE</planMode>
			<!--SINGLEPLAN|MULTIPLAN] - SINGLEPLAN=Generate the Cartesian plan as a single plan. MULTIPLAN=Generate the Cartesian plan as multiple plans for each user who has the same set of queries.  [node="regressionSecurityPlanTest"]
				e.g. when planMode=OVERWRITE and planModeType=MULTIPLAN - will produce a new list WHERE each user is a security plan with the full set of queries.  
				e.g. when planMode=APPEND and planModeType=SINGLEPLAN - will produce a new plan appended to the existing set of plans WHERE this plan will contain a Cartesian product of users and queries.-->
			<planModeType>MULTIPLAN</planModeType>
			<!--The plan id prefix provides a way of overriding the default [sp].  For example a plan id=sp1,sp2, etc.  This gives the user the ability to identify certain plans with different prefixes.  [node="regressionSecurityPlanTest"]-->
			<planIdPrefix>sp</planIdPrefix>
			<!-- The plan generate expected outcome determines whether to 
				(true) generate the outcome based on retrieving privileges for a given query resource and cross-referencing with the user and their groups to determine what the expected outcome should be upon execution.
						Updside: it provides a ready-made plan with expected outcome. [CAUTION: The developer needs to double-check that the expected outcome is what they want.  
								 The generation is based on how the privileges are actually set in the environemnt that PDTool connects to.  It may be the same environment that you are intending to
								 execute a test.  Generating a test and executing the test defeats the purpose of testing.  A validation of expected outcome is a required step between generation of the
								 test plan and executing the test plan.
						Downside: it is a very slow process as it requires retrieving groups for each user and privileges for each resource query FROM CIS and then calculating the expected outcome.
				(false) do not generate the outcome and leave blank. -->
			<planGenerateExpectedOutcome>true</planGenerateExpectedOutcome>
			
			<!--Flatten the security XML sections into a table structure for easier viewing -->
			<!--   The flatten security users XML [node="regressionSecurityUser"] output determines whether to (true) flatten the results (false) print out with pretty XML output.  It is recommended to print user XML as flattened so it can be read and edited like a table and is more compact.-->
			<flattenSecurityUsersXML>true</flattenSecurityUsersXML>
			<!--   The flatten security query (SQL Queries) [node="regressionSecurityQuery" and "queryType"=QUERY] XML output determines whether to (true) flatten the results (false) print out with pretty XML output.  It is recommended to print user XML as flattened so it can be read and edited like a table and is more compact.-->
			<flattenSecurityQueryQueriesXML>true</flattenSecurityQueryQueriesXML>
			<!--   The flatten security query (SQL Procedures) [node="regressionSecurityQuery" and "queryType"=PROCEDURE] XML output determines whether to (true) flatten the results (false) print out with pretty XML output.  It is recommended to print user XML as flattened so it can be read and edited like a table and is more compact.-->
			<flattenSecurityQueryProceduresXML>true</flattenSecurityQueryProceduresXML>
			<!--   The flatten security query (Web Services) [node="regressionSecurityQuery" and "queryType"=WEB_SERVICES] XML output determines whether to (true) flatten the results (false) print out with pretty XML output.  It is recommended to print user XML as flattened so it can be read and edited like a table and is more compact.-->
			<flattenSecurityQueryWebServicesXML>true</flattenSecurityQueryWebServicesXML>
			<!--   The flatten security plans [node="regressionSecurityPlanTest"] XML output determines whether to (true) flatten the results (false) print out with pretty XML output.  It is recommended to print user XML as flattened so it can be read and edited like a table and is more compact.-->
			<flattenSecurityPlansXML>true</flattenSecurityPlansXML>
		  </securityGenerationOptions>

		  <defaultProcParamValues>
				<bit>1</bit>
				<varchar>'dummyStr'</varchar>
				<char>'a'</char>
				<clob>A</clob>
				<integer>1</integer>
				<int>1</int>
				<bigint>1</bigint>
				<smallint>1</smallint>
				<tinyint>1</tinyint>
				<decimal>1.0</decimal>
				<numeric>1.0</numeric>
				<real>1.0</real>
				<float>1.0</float>
				<double>1.0</double>
				<date>'2011-01-01'</date>
				<time>'00:00:00'</time>
				<timestamp>'2011-01-01 00:00:00'</timestamp>
				<binary>''</binary>
				<varbinary>''</varbinary>
				<blob>''</blob>
				<xml>''</xml>
		  </defaultProcParamValues>
		</newFileParams>
		
		<!-- SECURITY: Execute test -->
		<testRunParams>
			<!-- Type of test: [functional|migration|performance] 
				functional - Only execute the default query against a table or procedure.  For a web service it is whatever input is provided.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	If the input file contains a full query, it will be rewritten using the FROM clause to use the default queries described in the <newFileParams> section
				functional_as_is - Execute the full query, procedure or a web service "as is" with whatever input is provided in the input file.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	Queries and Procedures are NOT rewritten using the FROM clause to use the default queries described in the "newFileParams" section
				migration - A full query like "select * from <table> where <where_clause>" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality.
				regression - A full query like "select * from {table} where {where_clause}" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality. 
								Note: functionally the same as migration but provided as a way of documenting the test type.								
				performance - A full query like "select * from <table> where <where_clause>" is executed repeatedly on multiple threads for a specified duration of time to capture results.	
								A performance test does not write results to an output file.  It is only concerned with gathering statistics on executions.	
				security - A query is provided to test the security privileges for a given user.
				-->
			<testType>security</testType>
			<!-- Comparison results are written to this log file. -->
			<logFilePath>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_SecurityTest.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>
			<!-- Base directory for output files  -->
			<baseDir>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_SecurityTest</baseDir>
			<!-- Output data file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<delimiter>PIPE</delimiter>
			<!-- Print output to command line: [verbose,summary,silent] verbose=print summary and results, summary=print query context, silent=nothing is printed to the command line. -->
			<printOutput>summary</printOutput>
		  
			<!-- Optional regression security testing section -->
			<securityExecution>
				<!-- Identifies one or more security plan ids to execute security tests with. -->
				<securityPlanIds>sp*</securityPlanIds>
				<!-- true=throw an exception when the overall security rating=FAIL, false=don't throw an exception when the overall security rating=FAIL -->
				<securityOverallRatingException>false</securityOverallRatingException>
				<!-- true=throw an exception when there were errors, result=ERROR, false=don't throw an exception when there were errors, result=ERROR -->
				<securityExecutionErrorException>true</securityExecutionErrorException>
			</securityExecution>

			<!-- Category filter:  Turn of/off the execution of an entire category. -->
			<runQueries>yes</runQueries>
			<runProcedures>yes</runProcedures>
			<runWS>yes</runWS>
			<!--  If Yes, run tests for all data sources FROM the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources>
			<!-- Datasource filter: published datasources for which tests are run for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>	
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
				<!-- Comment out to get all queries in the input file
				<resources>
					<resource>MY CATALOG.MY SCHEMA.*</resource>
				</resources>
				-->
		</testRunParams>
	</regressionTest>
	  
	  
	<!-- SECURITY TOP: Generate <newFileParams> and Execute <tesRunParams> test --> 
	<!--    Only the "SELECT TOP 1" query will be used for the security test instead of "SELECT COUNT(1)" for three reasons:
				1. It is more efficient and select count(*).
				2. It simplifies this XML by only having 1 entry.
				3. Only simple queries are needed for security testing.
	-->
	<regressionTest>
		<id>Test4.1_7.0</id>
		<!-- the inputFilePath and createNewFile are ignored for the security test -->
		<inputFilePath></inputFilePath>
		<tempDirPath>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj</tempDirPath>
		<createNewFile>no</createNewFile>

		<!-- SECURITY: Generate test --> 
		<newFileParams>
			<createQueries>yes</createQueries>
			<createProcedures>yes</createProcedures>
			<createWS>yes</createWS>
			<!-- The soap type specifies whether to generate web services using soap11 (default), soap12 or all.  soap12 is only applicable for CIS 6.1 and higher and only if a CIS New Composite Web Service has been created. -->
			<createSoapType>soap11</createSoapType>
			<!-- Category filter: [yes|no|true|false] Use the default query when generating input file. -->
			<useDefaultViewQuery>yes</useDefaultViewQuery>
			<useDefaultProcQuery>yes</useDefaultProcQuery>
			<useDefaultWSQuery>yes</useDefaultWSQuery>
			<!--  Default queries for Views and Procedures. -->
			<publishedViewQry>SELECT TOP 1 * FROM</publishedViewQry>
			<publishedProcQry>SELECT TOP 1 * FROM</publishedProcQry>
			<!--  If Yes, generate entries for all data sources in the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources>
			<!-- Datasource filter: published datasources for which tests are run for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>	
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
		  
		  <!-- Options for generating the Regression Security XML section. -->
		  <securityGenerationOptions>
			<!--Path to Target Regression Module XML - a required path to the target configuration file for the regression module.  Provides a way of writing to a different file than the source or original RegressionModule.xml.-->
			<pathToTargetRegressionXML>%REGRESSION_TEST_HOME%/modules/generated/MyProject1SubProj_RegressionModule_gen.xml</pathToTargetRegressionXML>
			<!--[optional] A security user default encrypted password.  [node="regressionSecurityUser"] It will be encrypted when the ExecutePDTool.bat -encrypt ..\resources\modules\RegressionModule.xml is executed.-->
			<encryptedPassword>password</encryptedPassword>
			<!--[optional] Determines what CIS users to generate.  Wildcards (*) may be used.  [node="regressionSecurityUser"]-->
			<userFilter>user1,user2</userFilter>
			<!--[optional] Provides a way of specifying what domain the userFilter should be applied to.  [node="regressionSecurityUser"]-->
			<domainFilter>composite</domainFilter>
			<!--[NOEXEC|OVERWRITE|APPEND] - NOEXEC (default)=do nothing, don't execute. OVERWRITE=overwrite existing security user XML, APPEND=add to existing security user XML if the user does not exist.  [node="regressionSecurityUser"]-->
			<userMode>OVERWRITE</userMode>
			<!--[NOEXEC|OVERWRITE|APPEND] - NOEXEC (default)=do nothing, don't execute. OVERWRITE=overwrite existing security query XML, APPEND=add to existing security query XML if the query does not exist.  [node="regressionSecurityQuery"-->
			<queryMode>OVERWRITE</queryMode>
			<!--[NOEXEC|OVERWRITE|APPEND] - NOEXEC (default)=do nothing, don't execute. OVERWRITE=overwrite existing security plan XML, APPEND=add to existing security plan XML if the plan does not exist.  [node="regressionSecurityPlanTest"]-->
			<planMode>OVERWRITE</planMode>
			<!--SINGLEPLAN|MULTIPLAN] - SINGLEPLAN=Generate the Cartesian plan as a single plan. MULTIPLAN=Generate the Cartesian plan as multiple plans for each user who has the same set of queries.  [node="regressionSecurityPlanTest"]
				e.g. when planMode=OVERWRITE and planModeType=MULTIPLAN - will produce a new list WHERE each user is a security plan with the full set of queries.  
				e.g. when planMode=APPEND and planModeType=SINGLEPLAN - will produce a new plan appended to the existing set of plans WHERE this plan will contain a Cartesian product of users and queries.-->
			<planModeType>MULTIPLAN</planModeType>
			<!--The plan id prefix provides a way of overriding the default [sp].  For example a plan id=sp1,sp2, etc.  This gives the user the ability to identify certain plans with different prefixes.  [node="regressionSecurityPlanTest"]-->
			<planIdPrefix>sp</planIdPrefix>
			<!-- The plan generate expected outcome determines whether to 
				(true) generate the outcome based on retrieving privileges for a given query resource and cross-referencing with the user and their groups to determine what the expected outcome should be upon execution.
						Updside: it provides a ready-made plan with expected outcome. [CAUTION: The developer needs to double-check that the expected outcome is what they want.  
								 The generation is based on how the privileges are actually set in the environemnt that PDTool connects to.  It may be the same environment that you are intending to
								 execute a test.  Generating a test and executing the test defeats the purpose of testing.  A validation of expected outcome is a required step between generation of the
								 test plan and executing the test plan.
						Downside: it is a very slow process as it requires retrieving groups for each user and privileges for each resource query FROM CIS and then calculating the expected outcome.
				(false) do not generate the outcome and leave blank. -->
			<planGenerateExpectedOutcome>true</planGenerateExpectedOutcome>
			
			<!--Flatten the security XML sections into a table structure for easier viewing -->
			<!--   The flatten security users XML [node="regressionSecurityUser"] output determines whether to (true) flatten the results (false) print out with pretty XML output.  It is recommended to print user XML as flattened so it can be read and edited like a table and is more compact.-->
			<flattenSecurityUsersXML>true</flattenSecurityUsersXML>
			<!--   The flatten security query (SQL Queries) [node="regressionSecurityQuery" and "queryType"=QUERY] XML output determines whether to (true) flatten the results (false) print out with pretty XML output.  It is recommended to print user XML as flattened so it can be read and edited like a table and is more compact.-->
			<flattenSecurityQueryQueriesXML>true</flattenSecurityQueryQueriesXML>
			<!--   The flatten security query (SQL Procedures) [node="regressionSecurityQuery" and "queryType"=PROCEDURE] XML output determines whether to (true) flatten the results (false) print out with pretty XML output.  It is recommended to print user XML as flattened so it can be read and edited like a table and is more compact.-->
			<flattenSecurityQueryProceduresXML>true</flattenSecurityQueryProceduresXML>
			<!--   The flatten security query (Web Services) [node="regressionSecurityQuery" and "queryType"=WEB_SERVICES] XML output determines whether to (true) flatten the results (false) print out with pretty XML output.  It is recommended to print user XML as flattened so it can be read and edited like a table and is more compact.-->
			<flattenSecurityQueryWebServicesXML>true</flattenSecurityQueryWebServicesXML>
			<!--   The flatten security plans [node="regressionSecurityPlanTest"] XML output determines whether to (true) flatten the results (false) print out with pretty XML output.  It is recommended to print user XML as flattened so it can be read and edited like a table and is more compact.-->
			<flattenSecurityPlansXML>true</flattenSecurityPlansXML>
		  </securityGenerationOptions>

		  <defaultProcParamValues>
				<bit>1</bit>
				<varchar>'dummyStr'</varchar>
				<char>'a'</char>
				<clob>A</clob>
				<integer>1</integer>
				<int>1</int>
				<bigint>1</bigint>
				<smallint>1</smallint>
				<tinyint>1</tinyint>
				<decimal>1.0</decimal>
				<numeric>1.0</numeric>
				<real>1.0</real>
				<float>1.0</float>
				<double>1.0</double>
				<date>'2011-01-01'</date>
				<time>'00:00:00'</time>
				<timestamp>'2011-01-01 00:00:00'</timestamp>
				<binary>''</binary>
				<varbinary>''</varbinary>
				<blob>''</blob>
				<xml>''</xml>
		  </defaultProcParamValues>
		</newFileParams>
		
		<!-- SECURITY: Execute test -->
		<testRunParams>
			<!-- Type of test: [functional|migration|performance] 
				functional - Only execute the default query against a table or procedure.  For a web service it is whatever input is provided.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	If the input file contains a full query, it will be rewritten using the FROM clause to use the default queries described in the <newFileParams> section
				functional_as_is - Execute the full query, procedure or a web service "as is" with whatever input is provided in the input file.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	Queries and Procedures are NOT rewritten using the FROM clause to use the default queries described in the "newFileParams" section
				migration - A full query like "select * from <table> where <where_clause>" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality.
				regression - A full query like "select * from {table} where {where_clause}" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality. 
								Note: functionally the same as migration but provided as a way of documenting the test type.								
				performance - A full query like "select * from <table> where <where_clause>" is executed repeatedly on multiple threads for a specified duration of time to capture results.	
								A performance test does not write results to an output file.  It is only concerned with gathering statistics on executions.	
				security - A query is provided to test the security privileges for a given user.
				-->
			<testType>security</testType>
			<!-- Comparison results are written to this log file. -->
			<logFilePath>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_SecurityTest.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>
			<!-- Base directory for output files  -->
			<baseDir>%REGRESSION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_SecurityTest</baseDir>
			<!-- Output data file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<delimiter>PIPE</delimiter>
			<!-- Print output to command line: [verbose,summary,silent] verbose=print summary and results, summary=print query context, silent=nothing is printed to the command line. -->
			<printOutput>summary</printOutput>
		  
			<!-- Optional regression security testing section -->
			<securityExecution>
				<!-- Identifies one or more security plan ids to execute security tests with. -->
				<securityPlanIds>sp*</securityPlanIds>
				<!-- true=throw an exception when the overall security rating=FAIL, false=don't throw an exception when the overall security rating=FAIL -->
				<securityOverallRatingException>false</securityOverallRatingException>
				<!-- true=throw an exception when there were errors, result=ERROR, false=don't throw an exception when there were errors, result=ERROR -->
				<securityExecutionErrorException>true</securityExecutionErrorException>
			</securityExecution>

			<!-- Category filter:  Turn of/off the execution of an entire category. -->
			<runQueries>yes</runQueries>
			<runProcedures>yes</runProcedures>
			<runWS>yes</runWS>
			<!--  If Yes, run tests for all data sources FROM the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources>
			<!-- Datasource filter: published datasources for which tests are run for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>	
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
				<!-- Comment out to get all queries in the input file
				<resources>
					<resource>MY CATALOG.MY SCHEMA.*</resource>
				</resources>
				-->
		</testRunParams>
	</regressionTest>
	  

	<!--Element regressionQueries is optional-->
	<regressionQueries>
		<regressionQuery>
			<datasource></datasource>
			<query></query>
		</regressionQuery>
	</regressionQueries>

	<!-- Regression Security Instructions:
		After generating the XML, 
			1. Locate the generated file in the /generated sub-directory.
			2. Edit the file and go to the end of the file
			3. Copy all lines starting with <regressionSecurity> and ending with </regressionSecurity>
			4. Past over the top the same XML nodes below indicated by 
					BEGIN PASTE AREA
					END PASTE AREA
		XML Structure Documentation:
			regressionSecurity/regressionSecurityUsers:  
				List of users to be used for security testing.
			regressionSecurity/regressionSecurityQueries:  
				List of queries, procedures or web services to be used for security testing.  Only one query per object is needed.  
				The query "select TOP 1 *" is used for a functional test.
			regressionSecurity/regressionSecurityPlans/regressionSecurityPlan: 
				List of security plans.  Each plan provides the functionality of a test.  The plans are permutations of users and queries. 
					For example, if there are 2 users and 5 queries [equating to 5 resources], then there are 10 security plans.
				The expectedOutcome [PASS|FAIL] is the measure of whether a user is supposed to pass or fail a query. 
				The developer or QA technician is required to modify the expectedOutcome variable and set it to what they expect as the actual result of the query.
	-->
	<!-- BEGIN PASTE AREA -->
     <regressionSecurity>
		<!-- List of users to be used for security testing. -->
		<regressionSecurityUsers>
			<!-- Users for both projects areas: MyProject1SubProj and MyProject2SubProj -->
            <regressionSecurityUser><id>rsu1</id><userName>user1</userName><encryptedPassword>password</encryptedPassword><domain>composite</domain></regressionSecurityUser>
            <regressionSecurityUser><id>rsu2</id><userName>user2</userName><encryptedPassword>password</encryptedPassword><domain>composite</domain></regressionSecurityUser>
		</regressionSecurityUsers>
		
		<!-- List of queries, procedures or web services to be used for security testing.  Only one query per object is needed.  The query "select TOP 1 *" is used for a functional test. -->
		<!-- NOTE: It is not typical to have 2 separate published database "Busines Line/Area/Subject Area" projects represented in the same regression XML file.
				However, it is done here in order to support the 2 sample databases that come with the "Automated Test Framework". 
				As a result, there are 2 sets of project queries and 4 sets of security query plans. -->
		<regressionSecurityQueries>
			<!-- Queries for MyProject1SubProj -->
            <regressionSecurityQuery><id>rsq1</id><datasource>"MY DB"</datasource><queryType>QUERY</queryType><query>SELECT TOP 1 * FROM "MY CATALOG"."MY SCHEMA".ViewSales</query><resourcePath>/services/databases/MY DB/MY CATALOG/MY SCHEMA/ViewSales</resourcePath><resourceType>TABLE</resourceType></regressionSecurityQuery>
            <regressionSecurityQuery><id>rsq2</id><datasource>"MY DB"</datasource><queryType>QUERY</queryType><query>SELECT TOP 1 * FROM "MY CATALOG"."MY SCHEMA".CompositeView</query><resourcePath>/services/databases/MY DB/MY CATALOG/MY SCHEMA/CompositeView</resourcePath><resourceType>TABLE</resourceType></regressionSecurityQuery>
            <regressionSecurityQuery><id>rsq3</id><datasource>"MY DB"</datasource><queryType>QUERY</queryType><query>SELECT TOP 1 * FROM "MY CATALOG"."MY SCHEMA".ViewOrder</query><resourcePath>/services/databases/MY DB/MY CATALOG/MY SCHEMA/ViewOrder</resourcePath><resourceType>TABLE</resourceType></regressionSecurityQuery>
            <regressionSecurityQuery><id>rsq4</id><datasource>"MY DB"</datasource><queryType>QUERY</queryType><query>SELECT TOP 1 * FROM "MY CATALOG"."MY SCHEMA".ViewSupplier</query><resourcePath>/services/databases/MY DB/MY CATALOG/MY SCHEMA/ViewSupplier</resourcePath><resourceType>TABLE</resourceType></regressionSecurityQuery>
            <regressionSecurityQuery><id>rsq5</id><datasource>"MY DB"</datasource><queryType>PROCEDURE</queryType><query>SELECT TOP 1 * FROM "MY CATALOG"."MY SCHEMA".LookupProduct( 1 )</query><resourcePath>/services/databases/MY DB/MY CATALOG/MY SCHEMA/LookupProduct</resourcePath><resourceType>PROCEDURE</resourceType></regressionSecurityQuery>

			<!-- Queries for MyProject2SubProj -->
            <regressionSecurityQuery><id>rsq6</id><datasource>MY_DB</datasource><queryType>QUERY</queryType><query>SELECT TOP 1 * FROM MY_CATALOG.MY_SCHEMA.ViewSupplier</query><resourcePath>/services/databases/MY_DB/MY_CATALOG/MY_SCHEMA/ViewSupplier</resourcePath><resourceType>TABLE</resourceType></regressionSecurityQuery>
            <regressionSecurityQuery><id>rsq7</id><datasource>MY_DB</datasource><queryType>QUERY</queryType><query>SELECT TOP 1 * FROM MY_CATALOG.MY_SCHEMA.ViewOrder</query><resourcePath>/services/databases/MY_DB/MY_CATALOG/MY_SCHEMA/ViewOrder</resourcePath><resourceType>TABLE</resourceType></regressionSecurityQuery>
            <regressionSecurityQuery><id>rsq8</id><datasource>MY_DB</datasource><queryType>QUERY</queryType><query>SELECT TOP 1 * FROM MY_CATALOG.MY_SCHEMA.ViewSales</query><resourcePath>/services/databases/MY_DB/MY_CATALOG/MY_SCHEMA/ViewSales</resourcePath><resourceType>TABLE</resourceType></regressionSecurityQuery>
            <regressionSecurityQuery><id>rsq9</id><datasource>MY_DB</datasource><queryType>QUERY</queryType><query>SELECT TOP 1 * FROM MY_CATALOG.MY_SCHEMA.CompositeView</query><resourcePath>/services/databases/MY_DB/MY_CATALOG/MY_SCHEMA/CompositeView</resourcePath><resourceType>TABLE</resourceType></regressionSecurityQuery>
            <regressionSecurityQuery><id>rsq10</id><datasource>MY_DB</datasource><queryType>PROCEDURE</queryType><query>SELECT TOP 1 * FROM MY_CATALOG.MY_SCHEMA.LookupProduct( 1 )</query><resourcePath>/services/databases/MY_DB/MY_CATALOG/MY_SCHEMA/LookupProduct</resourcePath><resourceType>PROCEDURE</resourceType></regressionSecurityQuery>
		</regressionSecurityQueries>

		<!-- List of security plans.  Each plan provides the functionality of a test.  The expectedOutcome [PASS|FAIL] is the measure of whether a user is supposed to pass or fail a query. -->
		<regressionSecurityPlans>
			<!-- Security plans for MyProject1SubProj - test for the queries rsq1-rsq5 and users rsu1-rsu2. -->
            <regressionSecurityPlan>
                <id>sp1</id>
                <regressionSecurityPlanTest><id>rst1</id><enabled>true</enabled><userId>rsu1</userId><queryId>rsq1</queryId><expectedOutcome>PASS</expectedOutcome><description>user1 :: /services/databases/MY DB/MY CATALOG/MY SCHEMA/CompositeView</description></regressionSecurityPlanTest>
                <regressionSecurityPlanTest><id>rst2</id><enabled>true</enabled><userId>rsu1</userId><queryId>rsq2</queryId><expectedOutcome>PASS</expectedOutcome><description>user1 :: /services/databases/MY DB/MY CATALOG/MY SCHEMA/ViewOrder</description></regressionSecurityPlanTest>
                <regressionSecurityPlanTest><id>rst3</id><enabled>true</enabled><userId>rsu1</userId><queryId>rsq3</queryId><expectedOutcome>PASS</expectedOutcome><description>user1 :: /services/databases/MY DB/MY CATALOG/MY SCHEMA/ViewSales</description></regressionSecurityPlanTest>
                <regressionSecurityPlanTest><id>rst4</id><enabled>true</enabled><userId>rsu1</userId><queryId>rsq4</queryId><expectedOutcome>PASS</expectedOutcome><description>user1 :: /services/databases/MY DB/MY CATALOG/MY SCHEMA/ViewSupplier</description></regressionSecurityPlanTest>
                <regressionSecurityPlanTest><id>rst5</id><enabled>true</enabled><userId>rsu1</userId><queryId>rsq5</queryId><expectedOutcome>PASS</expectedOutcome><description>user1 :: /services/databases/MY DB/MY CATALOG/MY SCHEMA/LookupProduct</description></regressionSecurityPlanTest>
            </regressionSecurityPlan>
            <regressionSecurityPlan>
                <id>sp2</id>
                <regressionSecurityPlanTest><id>rst1</id><enabled>true</enabled><userId>rsu2</userId><queryId>rsq1</queryId><expectedOutcome>FAIL</expectedOutcome><description>user2 :: /services/databases/MY DB/MY CATALOG/MY SCHEMA/CompositeView</description></regressionSecurityPlanTest>
                <regressionSecurityPlanTest><id>rst2</id><enabled>true</enabled><userId>rsu2</userId><queryId>rsq2</queryId><expectedOutcome>FAIL</expectedOutcome><description>user2 :: /services/databases/MY DB/MY CATALOG/MY SCHEMA/ViewOrder</description></regressionSecurityPlanTest>
                <regressionSecurityPlanTest><id>rst3</id><enabled>true</enabled><userId>rsu2</userId><queryId>rsq3</queryId><expectedOutcome>FAIL</expectedOutcome><description>user2 :: /services/databases/MY DB/MY CATALOG/MY SCHEMA/ViewSales</description></regressionSecurityPlanTest>
                <regressionSecurityPlanTest><id>rst4</id><enabled>true</enabled><userId>rsu2</userId><queryId>rsq4</queryId><expectedOutcome>FAIL</expectedOutcome><description>user2 :: /services/databases/MY DB/MY CATALOG/MY SCHEMA/ViewSupplier</description></regressionSecurityPlanTest>
                <regressionSecurityPlanTest><id>rst5</id><enabled>true</enabled><userId>rsu2</userId><queryId>rsq5</queryId><expectedOutcome>FAIL</expectedOutcome><description>user2 :: /services/databases/MY DB/MY CATALOG/MY SCHEMA/LookupProduct</description></regressionSecurityPlanTest>
            </regressionSecurityPlan>

			<!-- Security plans for MyProject2SubProj - test for the queries rsq6-rsq10 and users rsu1-rsu2. -->
            <regressionSecurityPlan>
                <id>sp3</id>
                <regressionSecurityPlanTest><id>rst1</id><enabled>true</enabled><userId>rsu1</userId><queryId>rsq6</queryId><expectedOutcome>FAIL</expectedOutcome><description>user1 :: /services/databases/MY_DB/MY_CATALOG/MY_SCHEMA/ViewSupplier</description></regressionSecurityPlanTest>
                <regressionSecurityPlanTest><id>rst2</id><enabled>true</enabled><userId>rsu1</userId><queryId>rsq7</queryId><expectedOutcome>FAIL</expectedOutcome><description>user1 :: /services/databases/MY_DB/MY_CATALOG/MY_SCHEMA/ViewOrder</description></regressionSecurityPlanTest>
                <regressionSecurityPlanTest><id>rst3</id><enabled>true</enabled><userId>rsu1</userId><queryId>rsq8</queryId><expectedOutcome>FAIL</expectedOutcome><description>user1 :: /services/databases/MY_DB/MY_CATALOG/MY_SCHEMA/ViewSales</description></regressionSecurityPlanTest>
                <regressionSecurityPlanTest><id>rst4</id><enabled>true</enabled><userId>rsu1</userId><queryId>rsq9</queryId><expectedOutcome>FAIL</expectedOutcome><description>user1 :: /services/databases/MY_DB/MY_CATALOG/MY_SCHEMA/CompositeView</description></regressionSecurityPlanTest>
                <regressionSecurityPlanTest><id>rst5</id><enabled>true</enabled><userId>rsu1</userId><queryId>rsq10</queryId><expectedOutcome>FAIL</expectedOutcome><description>user1 :: /services/databases/MY_DB/MY_CATALOG/MY_SCHEMA/LookupProduct</description></regressionSecurityPlanTest>
            </regressionSecurityPlan>
            <regressionSecurityPlan>
                <id>sp4</id>
                <regressionSecurityPlanTest><id>rst1</id><enabled>true</enabled><userId>rsu2</userId><queryId>rsq6</queryId><expectedOutcome>PASS</expectedOutcome><description>user2 :: /services/databases/MY_DB/MY_CATALOG/MY_SCHEMA/ViewSupplier</description></regressionSecurityPlanTest>
                <regressionSecurityPlanTest><id>rst2</id><enabled>true</enabled><userId>rsu2</userId><queryId>rsq7</queryId><expectedOutcome>PASS</expectedOutcome><description>user2 :: /services/databases/MY_DB/MY_CATALOG/MY_SCHEMA/ViewOrder</description></regressionSecurityPlanTest>
                <regressionSecurityPlanTest><id>rst3</id><enabled>true</enabled><userId>rsu2</userId><queryId>rsq8</queryId><expectedOutcome>PASS</expectedOutcome><description>user2 :: /services/databases/MY_DB/MY_CATALOG/MY_SCHEMA/ViewSales</description></regressionSecurityPlanTest>
                <regressionSecurityPlanTest><id>rst4</id><enabled>true</enabled><userId>rsu2</userId><queryId>rsq9</queryId><expectedOutcome>PASS</expectedOutcome><description>user2 :: /services/databases/MY_DB/MY_CATALOG/MY_SCHEMA/CompositeView</description></regressionSecurityPlanTest>
                <regressionSecurityPlanTest><id>rst5</id><enabled>true</enabled><userId>rsu2</userId><queryId>rsq10</queryId><expectedOutcome>PASS</expectedOutcome><description>user2 :: /services/databases/MY_DB/MY_CATALOG/MY_SCHEMA/LookupProduct</description></regressionSecurityPlanTest>
            </regressionSecurityPlan>
		</regressionSecurityPlans>
	</regressionSecurity>
	<!-- END PASTE AREA -->

</p1:RegressionModule>
