<?xml version="1.0"?>
<!-- 
######################################################################
# (c) 2015 Cisco and/or its affiliates. All rights reserved.
# 
# This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
# Any dependent libraries supplied by third parties are provided under their own open source licenses as 
# described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
# part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
# csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
# csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
# optional version number) are provided as a convenience, but are covered under the licensing for the 
# Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
# through a valid license for that product.
# 
# This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
# Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
# 
######################################################################
INSTRUCTIONS TO MODIFY:
		1. Search and replace 33 occurrences of "MyProject1SubProj" with your project identifier "MyProject1SubProj".
		     This is the same name provided when copying the plan templates
		2. Search and replace 12 occurrences of "MY DB" with the actual Composite published data source name.
		3. Search and replace 12 occurrences of "MY CATALOG.MY SCHEMA.*" with the actual Composite published catalog and schema if applicable.
		     It could be just CATALOG.* if desired to get all schemas automatically.
		4. Save.
-->
<p1:RegressionModule xmlns:p1="http://www.dvbu.cisco.com/ps/deploytool/modules" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.cisco.dvbu.com/ps/deploytool/modules file:///C:/Users/ZKXL6UN/Documents/Composite/Utilities/PDTool/PDTool62/resources/schema/PDToolModules.xsd">
	<!-- SMOKE: Generate SQL input file -->
	<regressionTest>
		<id>Test1.1_6.2</id>
		<!-- MyProject1SubProj_SmokeTest_SQL.txt -->
		<inputFilePath>%MIGRATION_TEST_SQL%/%MIGRATION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>yes</createNewFile>
		<newFileParams>
			<createQueries>yes</createQueries>
			<createProcedures>yes</createProcedures>
			<createWS>no</createWS>
			<!-- The soap type specifies whether to generate web services using soap11 (default), soap12 or all.  soap12 is only applicable for CIS 6.1 and higher and only if a CIS New Composite Web Service has been created. -->
			<createSoapType>soap11</createSoapType>
			<!-- Category filter: [yes|no|true|false] Use the default query when generating input file. -->
			<useDefaultViewQuery>yes</useDefaultViewQuery>
			<useDefaultProcQuery>yes</useDefaultProcQuery>
			<useDefaultWSQuery>yes</useDefaultWSQuery>
			<!--  Default queries for Views and Procedures. -->
			<publishedViewQry>SELECT count(1) cnt FROM</publishedViewQry>
			<publishedProcQry>SELECT count(*) cnt FROM</publishedProcQry>
			<!--  If Yes, generate entries for all data sources in the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources>
			<!-- Datasource filter: published datasources for which input file entries are created for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<!--	This is a filter that can be fine-tuned for one or more resources.  If LEFT empty then all resources are compared. 
					A fully qualified resource may be used.  The resource validation is case insensitive.
					A single wildcard may be used before "*.resource", after "resource.*" or in the middle "folder.*.resource". 
					Overlapping resource wild cards will use the highest level specified in this list. 
					It may be used at the catalog or schema level to denote that all resources under that level should be compared.  
					For web services, use the CIS path starting after in the Web Services but excluding [/services/webservices]. 
					   e.g. New Composite Web Service: Folder1.Folder2.WebServiceName.OperationMethod
					   e.g. Legacy Web Service: Folder1.Folder2.WebServiceName.ServiceName.operations.OperationMethod
					Examples of filters for database tables and procedures [the database name is not included in the resource filter]:
						<resource>SCH1.*</resource>
						<resource>CAT1.*.customers</resource>
						<resource>ViewSales</resource>
						<resource>LookupProduct</resource>
					
					Examples of filters for web services [the web service name is included in the resource filter]:
						<resource>testWebService</resource> 				<- this is a legacy web service at the root of the web service folder
						<resource>testWebService_NoParams_bare</resource>	<- new composite web service at the root of the web service folder
						<resource>folder1.*</resource>						<- new composite web service located in the folder1 web service folder		
						<resource>folder2.testWebService*</resource>		<- new composite web service located in folder2 and matching a wild card starting with testWebService	
					-->
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			<defaultProcParamValues>
				<bit>1</bit>
				<varchar>'A'</varchar>
				<char>'a'</char>
				<clob>A</clob>
				<integer>1</integer>
				<int>1</int>
				<bigint>1</bigint>
				<smallint>1</smallint>
				<tinyint>1</tinyint>
				<decimal>1.0</decimal>
				<numeric>1.0</numeric>
				<real>1.0</real>
				<float>1.0</float>
				<double>1.0</double>
				<date>'2011-01-01'</date>
				<time>'00:00:00'</time>
				<timestamp>'2011-01-01 00:00:00'</timestamp>
				<binary>''</binary>
				<varbinary>''</varbinary>
				<blob>''</blob>
				<xml>''</xml>
			</defaultProcParamValues>
		</newFileParams>
	</regressionTest>
	
	<!-- SMOKE: Generate SQL input file using TOP command -->
	<regressionTest>
		<id>Test1.1_TOP_6.2</id>
		<!-- MyProject1SubProj_SmokeTest_SQL_TOP.txt -->
		<inputFilePath>%MIGRATION_TEST_SQL%/%MIGRATION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>yes</createNewFile>
		<newFileParams>
			<createQueries>yes</createQueries>
			<createProcedures>yes</createProcedures>
			<createWS>no</createWS>
			<!-- The soap type specifies whether to generate web services using soap11 (default), soap12 or all.  soap12 is only applicable for CIS 6.1 and higher and only if a CIS New Composite Web Service has been created. -->
			<createSoapType>soap11</createSoapType>
			<!-- Category filter: [yes|no|true|false] Use the default query when generating input file. -->
			<useDefaultViewQuery>yes</useDefaultViewQuery>
			<useDefaultProcQuery>yes</useDefaultProcQuery>
			<useDefaultWSQuery>yes</useDefaultWSQuery>
			<!--  Default queries for Views and Procedures. -->
			<publishedViewQry>SELECT TOP 1 * FROM</publishedViewQry>
			<publishedProcQry>SELECT TOP 1 * FROM</publishedProcQry>
			<!--  If Yes, generate entries for all data sources in the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources>
			<!-- Datasource filter: published datasources for which input file entries are created for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			<defaultProcParamValues>
				<bit>1</bit>
				<varchar>'A'</varchar>
				<char>'a'</char>
				<clob>A</clob>
				<integer>1</integer>
				<int>1</int>
				<bigint>1</bigint>
				<smallint>1</smallint>
				<tinyint>1</tinyint>
				<decimal>1.0</decimal>
				<numeric>1.0</numeric>
				<real>1.0</real>
				<float>1.0</float>
				<double>1.0</double>
				<date>'2011-01-01'</date>
				<time>'00:00:00'</time>
				<timestamp>'2011-01-01 00:00:00'</timestamp>
				<binary>''</binary>
				<varbinary>''</varbinary>
				<blob>''</blob>
				<xml>''</xml>
			</defaultProcParamValues>
		</newFileParams>
	</regressionTest>

	<!-- SMOKE: Generate SQL input file -->
	<regressionTest>
		<id>Test1.1_7.0</id>
		<!-- MyProject1SubProj_SmokeTest_SQL.txt -->
		<inputFilePath>%MIGRATION_TEST_SQL%/%MIGRATION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>yes</createNewFile>
		<newFileParams>
			<createQueries>yes</createQueries>
			<createProcedures>yes</createProcedures>
			<createWS>no</createWS>
			<!-- The soap type specifies whether to generate web services using soap11 (default), soap12 or all.  soap12 is only applicable for CIS 6.1 and higher and only if a CIS New Composite Web Service has been created. -->
			<createSoapType>soap11</createSoapType>
			<!-- Category filter: [yes|no|true|false] Use the default query when generating input file. -->
			<useDefaultViewQuery>yes</useDefaultViewQuery>
			<useDefaultProcQuery>yes</useDefaultProcQuery>
			<useDefaultWSQuery>yes</useDefaultWSQuery>
			<!--  Default queries for Views and Procedures. -->
			<publishedViewQry>SELECT count(1) cnt FROM</publishedViewQry>
			<publishedProcQry>SELECT count(*) cnt FROM</publishedProcQry>
			<!--  If Yes, generate entries for all data sources in the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources>
			<!-- Datasource filter: published datasources for which input file entries are created for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<!--	This is a filter that can be fine-tuned for one or more resources.  If LEFT empty then all resources are compared. 
					A fully qualified resource may be used.  The resource validation is case insensitive.
					A single wildcard may be used before "*.resource", after "resource.*" or in the middle "folder.*.resource". 
					Overlapping resource wild cards will use the highest level specified in this list. 
					It may be used at the catalog or schema level to denote that all resources under that level should be compared.  
					For web services, use the CIS path starting after in the Web Services but excluding [/services/webservices]. 
					   e.g. New Composite Web Service: Folder1.Folder2.WebServiceName.OperationMethod
					   e.g. Legacy Web Service: Folder1.Folder2.WebServiceName.ServiceName.operations.OperationMethod
					Examples of filters for database tables and procedures [the database name is not included in the resource filter]:
						<resource>SCH1.*</resource>
						<resource>CAT1.*.customers</resource>
						<resource>ViewSales</resource>
						<resource>LookupProduct</resource>
					
					Examples of filters for web services [the web service name is included in the resource filter]:
						<resource>testWebService</resource> 				<- this is a legacy web service at the root of the web service folder
						<resource>testWebService_NoParams_bare</resource>	<- new composite web service at the root of the web service folder
						<resource>folder1.*</resource>						<- new composite web service located in the folder1 web service folder		
						<resource>folder2.testWebService*</resource>		<- new composite web service located in folder2 and matching a wild card starting with testWebService	
					-->
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			<defaultProcParamValues>
				<bit>1</bit>
				<varchar>'A'</varchar>
				<char>'a'</char>
				<clob>A</clob>
				<integer>1</integer>
				<int>1</int>
				<bigint>1</bigint>
				<smallint>1</smallint>
				<tinyint>1</tinyint>
				<decimal>1.0</decimal>
				<numeric>1.0</numeric>
				<real>1.0</real>
				<float>1.0</float>
				<double>1.0</double>
				<date>'2011-01-01'</date>
				<time>'00:00:00'</time>
				<timestamp>'2011-01-01 00:00:00'</timestamp>
				<binary>''</binary>
				<varbinary>''</varbinary>
				<blob>''</blob>
				<xml>''</xml>
			</defaultProcParamValues>
		</newFileParams>
	</regressionTest>
	
	<!-- SMOKE: Generate SQL input file using TOP command -->
	<regressionTest>
		<id>Test1.1_TOP_7.0</id>
		<!-- MyProject1SubProj_SmokeTest_SQL_TOP.txt -->
		<inputFilePath>%MIGRATION_TEST_SQL%/%MIGRATION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>yes</createNewFile>
		<newFileParams>
			<createQueries>yes</createQueries>
			<createProcedures>yes</createProcedures>
			<createWS>no</createWS>
			<!-- The soap type specifies whether to generate web services using soap11 (default), soap12 or all.  soap12 is only applicable for CIS 6.1 and higher and only if a CIS New Composite Web Service has been created. -->
			<createSoapType>soap11</createSoapType>
			<!-- Category filter: [yes|no|true|false] Use the default query when generating input file. -->
			<useDefaultViewQuery>yes</useDefaultViewQuery>
			<useDefaultProcQuery>yes</useDefaultProcQuery>
			<useDefaultWSQuery>yes</useDefaultWSQuery>
			<!--  Default queries for Views and Procedures. -->
			<publishedViewQry>SELECT TOP 1 * FROM</publishedViewQry>
			<publishedProcQry>SELECT TOP 1 * FROM</publishedProcQry>
			<!--  If Yes, generate entries for all data sources in the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources>
			<!-- Datasource filter: published datasources for which input file entries are created for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			<defaultProcParamValues>
				<bit>1</bit>
				<varchar>'A'</varchar>
				<char>'a'</char>
				<clob>A</clob>
				<integer>1</integer>
				<int>1</int>
				<bigint>1</bigint>
				<smallint>1</smallint>
				<tinyint>1</tinyint>
				<decimal>1.0</decimal>
				<numeric>1.0</numeric>
				<real>1.0</real>
				<float>1.0</float>
				<double>1.0</double>
				<date>'2011-01-01'</date>
				<time>'00:00:00'</time>
				<timestamp>'2011-01-01 00:00:00'</timestamp>
				<binary>''</binary>
				<varbinary>''</varbinary>
				<blob>''</blob>
				<xml>''</xml>
			</defaultProcParamValues>
		</newFileParams>
	</regressionTest>

	<!-- SMOKE: Execute first test -->
	<regressionTest>
		<id>Test1.2_6.2</id>
		<!-- MyProject1SubProj_SmokeTest_SQL$CUSTOM$.txt -->
		<inputFilePath>%MIGRATION_TEST_SQL%/%MIGRATION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>no</createNewFile>
		<testRunParams>
			<!-- Type of test: [functional|migration|performance] 
				functional - Only execute the default query against a table or procedure.  For a web service it is whatever input is provided.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	If the input file contains a full query, it will be rewritten using the FROM clause to use the default queries described in the <newFileParams> section
				migration - A full query like "select * FROM <table> WHERE <WHERE_clause>" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality.
				regression - A full query like "select * FROM {table} WHERE {WHERE_clause}" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality. 
								Note: functionally the same as migration but provided as a way of documenting the test type.								
				performance - A full query like "select * FROM <table> WHERE <WHERE_clause>" is executed repeatedly on multiple threads for a specified duration of time to capture results.	
								A performance test does not write results to an output file.  It is only concerned with gathering statistics on executions.	
			-->
			<testType>functional</testType>
			<!-- Test run results are written to this log file. -->
			<logFilePath>%MIGRATION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_SmokeTest$CUSTOM$.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>
			<!-- Base directory for output data files  -->
			<baseDir>%MIGRATION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_SmokeTest$CUSTOM$</baseDir>
			<!-- Output data file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<delimiter>PIPE</delimiter>
			<!-- Print output: [verbose,summary,silent] verbose=print summary and results, summary=print query context, silent=nothing is printed to the command line. -->
			<printOutput>summary</printOutput>

			<!-- Category filter:  Turn of/off the execution of an entire category. -->
			<runQueries>yes</runQueries>
			<runProcedures>yes</runProcedures>
			<runWS>yes</runWS>
			<!--  If Yes, run tests for all data sources FROM the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources>
			<!-- Datasource filter: published datasources for which tests are run for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<!-- Comment out to get all queries in the input file
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			-->
		</testRunParams>
	</regressionTest>

	<!-- SMOKE: Execute first test -->
	<regressionTest>
		<id>Test1.2_7.0</id>
		<!-- MyProject1SubProj_SmokeTest_SQL$CUSTOM$.txt -->
		<inputFilePath>%MIGRATION_TEST_SQL%/%MIGRATION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>no</createNewFile>
		<testRunParams>
			<!-- Type of test: [functional|migration|performance] 
				functional - Only execute the default query against a table or procedure.  For a web service it is whatever input is provided.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	If the input file contains a full query, it will be rewritten using the FROM clause to use the default queries described in the <newFileParams> section
				migration - A full query like "select * FROM <table> WHERE <WHERE_clause>" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality.
				regression - A full query like "select * FROM {table} WHERE {WHERE_clause}" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality. 
								Note: functionally the same as migration but provided as a way of documenting the test type.								
				performance - A full query like "select * FROM <table> WHERE <WHERE_clause>" is executed repeatedly on multiple threads for a specified duration of time to capture results.	
								A performance test does not write results to an output file.  It is only concerned with gathering statistics on executions.	
			-->
			<testType>functional</testType>
			<!-- Test run results are written to this log file. -->
			<logFilePath>%MIGRATION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER2/$ENV_TYPE$_SmokeTest$CUSTOM$.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>
			<!-- Base directory for output data files  -->
			<baseDir>%MIGRATION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER2/$ENV_TYPE$_SmokeTest$CUSTOM$</baseDir>
			<!-- Output data file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<delimiter>PIPE</delimiter>
			<!-- Print output: [verbose,summary,silent] verbose=print summary and results, summary=print query context, silent=nothing is printed to the command line. -->
			<printOutput>summary</printOutput>

			<!-- Category filter:  Turn of/off the execution of an entire category. -->
			<runQueries>yes</runQueries>
			<runProcedures>yes</runProcedures>
			<runWS>yes</runWS>
			<!--  If Yes, run tests for all data sources FROM the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources>
			<!-- Datasource filter: published datasources for which tests are run for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<!-- Comment out to get all queries in the input file
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			-->
		</testRunParams>
	</regressionTest>
	
	<!-- REGRESSION: Execute first test -->
	<regressionTest>
		<id>Test2.1_6.2</id>
		<!-- MyProject1SubProj_RegressionTest_SQL$CUSTOM$.txt -->
		<inputFilePath>%MIGRATION_TEST_SQL%/%MIGRATION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>no</createNewFile>
			
		<testRunParams>
			<!-- Type of test: [functional|migration|performance] 
				functional - Only execute the default query against a table or procedure.  For a web service it is whatever input is provided.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	If the input file contains a full query, it will be rewritten using the FROM clause to use the default queries described in the <newFileParams> section
				migration - A full query like "select * FROM <table> WHERE <WHERE_clause>" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality.
				regression - A full query like "select * FROM {table} WHERE {WHERE_clause}" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality. 
								Note: functionally the same as migration but provided as a way of documenting the test type.								
				performance - A full query like "select * FROM <table> WHERE <WHERE_clause>" is executed repeatedly on multiple threads for a specified duration of time to capture results.
								A performance test does not write results to an output file.  It is only concerned with gathering statistics on executions.	
			-->
			<testType>regression</testType>
			
			<!-- Comparison results are written to this log file. -->
			<logFilePath>%MIGRATION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_RegressionTest$CUSTOM$.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>
			
			<!-- Base directory for output data files  -->
			<baseDir>%MIGRATION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_RegressionTest$CUSTOM$</baseDir>
			<!-- Output data file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<delimiter>PIPE</delimiter>
			<!-- Print output to command line: [verbose,summary,silent] verbose=print summary and results, summary=print query context, silent=nothing is printed to the command line. -->
			<printOutput>summary</printOutput>
		
			<!-- Category filter:  Turn of/off the execution of an entire category. -->
			<runQueries>yes</runQueries>
			<runProcedures>yes</runProcedures>
			<runWS>yes</runWS>
			<!--  If Yes, run tests for all data sources FROM the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources> 
			<!-- Datasource filter: published datasources for which tests are run for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>	
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<!-- Comment out to get all queries in the input file
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			-->
		</testRunParams>
	</regressionTest>
	
	<!-- REGRESSION: Execute second test -->
	<regressionTest>
		<id>Test2.1_7.0</id>
		<!-- MyProject1SubProj_RegressionTest_SQL$CUSTOM$.txt -->
		<inputFilePath>%MIGRATION_TEST_SQL%/%MIGRATION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>no</createNewFile>
			
		<testRunParams>
			<!-- Type of test: [functional|migration|performance] 
				functional - Only execute the default query against a table or procedure.  For a web service it is whatever input is provided.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	If the input file contains a full query, it will be rewritten using the FROM clause to use the default queries described in the <newFileParams> section
				migration - A full query like "select * FROM <table> WHERE <WHERE_clause>" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality.
				regression - A full query like "select * FROM {table} WHERE {WHERE_clause}" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality. 
								Note: functionally the same as migration but provided as a way of documenting the test type.								
				performance - A full query like "select * FROM <table> WHERE <WHERE_clause>" is executed repeatedly on multiple threads for a specified duration of time to capture results.
								A performance test does not write results to an output file.  It is only concerned with gathering statistics on executions.	
			-->
			<testType>regression</testType>
			
			<!-- Comparison results are written to this log file. -->
			<logFilePath>%MIGRATION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER2/$ENV_TYPE$_RegressionTest$CUSTOM$.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>
			
			<!-- Base directory for output data files  -->
			<baseDir>%MIGRATION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER2/$ENV_TYPE$_RegressionTest$CUSTOM$</baseDir>
			<!-- Output data file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<delimiter>PIPE</delimiter>
			<!-- Print output to command line: [verbose,summary,silent] verbose=print summary and results, summary=print query context, silent=nothing is printed to the command line. -->
			<printOutput>summary</printOutput>
		
			<!-- Category filter:  Turn of/off the execution of an entire category. -->
			<runQueries>yes</runQueries>
			<runProcedures>yes</runProcedures>
			<runWS>yes</runWS>
			<!--  If Yes, run tests for all data sources FROM the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources> 
			<!-- Datasource filter: published datasources for which tests are run for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>	
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<!-- Comment out to get all queries in the input file
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			-->
		</testRunParams>
	</regressionTest>

	<!-- REGRESSION: Compare files and compare logs -->
	<regressionTest>
		<id>Test2.2_7.0</id>
		<inputFilePath>%MIGRATION_TEST_SQL%/%MIGRATION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>no</createNewFile>
			
		<compareFiles>
			<!-- Comparison results are written to this log file. -->
			<logFilePath>%MIGRATION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER2/$ENV_TYPE$_RegressionTest_CompareFiles$CUSTOM$.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>

			<!-- These are the two base directories FROM which the files will be retrieved from.  They represent the two instances of the regression execution tests and two different points in time. -->
			<baseDir1>%MIGRATION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_RegressionTest$CUSTOM$</baseDir1>
			<baseDir2>%MIGRATION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER2/$ENV_TYPE$_RegressionTest$CUSTOM$</baseDir2>

			<!-- Category filter: This informs the Regression Module whether to perform the comparison for Queries, Procedure and Web Services.  It is a way of turning comparison on and off for an entire category of resources. -->
			<compareQueries>yes</compareQueries>
			<compareProcedures>yes</compareProcedures>
			<compareWS>yes</compareWS>
			
			<!--  If Yes, run comparisons for all data sources FROM the input file. datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources> 
			<!-- Datasource filter: published datasources for which comparisons are run for JDBC and Web Services datasources -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>	
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<!-- Comment out to get all queries in the input file
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			-->
		</compareFiles>		
		
		<compareLogs>
			<!-- Comparison results are written to this log file. -->
			<logFilePath>%MIGRATION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER2/$ENV_TYPE$_RegressionTest_CompareLogs$CUSTOM$.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>

			<!-- These are the two summary execution log files to be compared. -->
			<logFilePath1>%MIGRATION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_RegressionTest$CUSTOM$.log</logFilePath1>
			<logFilePath2>%MIGRATION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER2/$ENV_TYPE$_RegressionTest$CUSTOM$.log</logFilePath2>

			<!-- Log file 1 and 2 delimiters [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter1>PIPE</logDelimiter1>
			<logDelimiter2>PIPE</logDelimiter2>

			<!-- Default duration delta for all queries.  When the difference between duration in file2 and file1 is greater than the default duration then it is an error (outside acceptable range). -->
			<durationDelta>000 00:00:01.0000</durationDelta>
		</compareLogs>
	</regressionTest>
	
	<!-- PERFORMANCE: Execute first test -->
	<regressionTest>
		<id>Test3.1_6.2</id>
		<!-- MyProject1SubProj_PerfTest_SQL$CUSTOM$.txt -->
		<inputFilePath>%MIGRATION_TEST_SQL%/%MIGRATION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>yes</createNewFile>
			
		<testRunParams>
			<!-- Type of test: [functional|migration|performance] 
				functional - Only execute the default query against a table or procedure.  For a web service it is whatever input is provided.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	If the input file contains a full query, it will be rewritten using the FROM clause to use the default queries described in the <newFileParams> section
				migration - A full query like "select * FROM <table> WHERE <WHERE_clause>" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality.
				regression - A full query like "select * FROM {table} WHERE {WHERE_clause}" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality. 
								Note: functionally the same as migration but provided as a way of documenting the test type.								
				performance - A full query like "select * FROM <table> WHERE <WHERE_clause>" is executed repeatedly on multiple threads for a specified duration of time to capture results.	
								A performance test does not write results to an output file.  It is only concerned with gathering statistics on executions.	
			-->
			<testType>performance</testType>

			<!-- Comparison results are written to this log file. -->
			<logFilePath>%MIGRATION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_PerfTest$CUSTOM$.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>
			
			<!-- Base directory for output data files  -->
			<baseDir>%MIGRATION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_PerfTest$CUSTOM$</baseDir>
			<!-- Output data file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<delimiter>PIPE</delimiter>
			<!-- Print output to command line: [verbose,summary,silent] verbose=print summary and results, summary=print query context, silent=nothing is printed to the command line. -->
			<printOutput>summary</printOutput>
			<!-- (Optional) The number of threads to create when doing performance testing. -->
			<perfTestThreads>5</perfTestThreads>
			<!-- (Optional) The duration in seconds to execute the performance test for. -->
			<perfTestDuration>60</perfTestDuration>
			<!-- (Optional) The number of seconds to sleep in between printing stats when executing the performance test. -->
			<perfTestSleepPrint>1</perfTestSleepPrint>
			<!-- (Optional) The number of seconds to sleep in between query executions when executing the performance test. -->
			<perfTestSleepExec>0</perfTestSleepExec>

			<!-- Category filter:  Turn of/off the execution of an entire category. -->
			<runQueries>yes</runQueries>
			<runProcedures>yes</runProcedures>
			<runWS>yes</runWS>
			<!--  If Yes, run tests for all data sources FROM the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources> 
			<!-- Datasource filter: published datasources for which tests are run for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>	
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<!-- Comment out to get all queries in the input file
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			-->
		</testRunParams>	
	</regressionTest>

	<!-- PERFORMANCE: Execute second test -->
	<regressionTest>
		<id>Test3.1_7.0</id>
		<!-- MyProject1SubProj_PerfTest_SQL$CUSTOM$.txt -->
		<inputFilePath>%MIGRATION_TEST_SQL%/%MIGRATION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>yes</createNewFile>
			
		<testRunParams>
			<!-- Type of test: [functional|migration|performance] 
				functional - Only execute the default query against a table or procedure.  For a web service it is whatever input is provided.  
								This test only cares about whether the resources executes or not.  Results may be output if the logFilePath contains a file path.
							 	If the input file contains a full query, it will be rewritten using the FROM clause to use the default queries described in the <newFileParams> section
				migration - A full query like "select * FROM <table> WHERE <WHERE_clause>" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality.
				regression - A full query like "select * FROM {table} WHERE {WHERE_clause}" is executed so that a result set is returned and saved to a file.  
								A second instance of this test is executed and the result files are compared for equality. 
								Note: functionally the same as migration but provided as a way of documenting the test type.								
				performance - A full query like "select * FROM <table> WHERE <WHERE_clause>" is executed repeatedly on multiple threads for a specified duration of time to capture results.	
								A performance test does not write results to an output file.  It is only concerned with gathering statistics on executions.	
			-->
			<testType>performance</testType>

			<!-- Comparison results are written to this log file. -->
			<logFilePath>%MIGRATION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER2/$ENV_TYPE$_PerfTest$CUSTOM$.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>
			
			<!-- Base directory for output files  -->
			<baseDir>%MIGRATION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER2/$ENV_TYPE$_PerfTest$CUSTOM$</baseDir>
			<!-- Output data file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<delimiter>PIPE</delimiter>
			<!-- Print output to command line: [verbose,summary,silent] verbose=print summary and results, summary=print query context, silent=nothing is printed to the command line. -->
			<printOutput>summary</printOutput>
			<!-- (Optional) The number of threads to create when doing performance testing. -->
			<perfTestThreads>5</perfTestThreads>
			<!-- (Optional) The duration in seconds to execute the performance test for. -->
			<perfTestDuration>60</perfTestDuration>
			<!-- (Optional) The number of seconds to sleep in between printing stats when executing the performance test. -->
			<perfTestSleepPrint>1</perfTestSleepPrint>
			<!-- (Optional) The number of seconds to sleep in between query executions when executing the performance test. -->
			<perfTestSleepExec>0</perfTestSleepExec>

			<!-- Category filter:  Turn of/off the execution of an entire category. -->
			<runQueries>yes</runQueries>
			<runProcedures>yes</runProcedures>
			<runWS>yes</runWS>
			<!--  If Yes, run tests for all data sources FROM the input file, datasources below are ignored -->
			<useAllDatasources>no</useAllDatasources> 
			<!-- Datasource filter: published datasources for which tests are run for JDBC and Web Services datasources. -->
			<datasources>
				<dsName>MY DB</dsName>
			</datasources>	
			<!-- Resource filter: This is a list of Catalog, Schema or Web Services resources for which to perform comparisons.  -->
			<!-- Comment out to get all queries in the input file
			<resources>
				<resource>MY CATALOG.MY SCHEMA.*</resource>
			</resources>
			-->
		</testRunParams>
	</regressionTest>

	<!-- PERFORMANCE: Compare logs -->
	<regressionTest>
		<id>Test3.2_7.0</id>
		<inputFilePath>%MIGRATION_TEST_SQL%/%MIGRATION_TEST_SQL_FILE_NAME%</inputFilePath>
		<createNewFile>yes</createNewFile>
	
		<compareLogs>
			<!-- Comparison results are written to this log file. -->
			<logFilePath>%MIGRATION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER2/$ENV_TYPE$_PerfTest_CompareLogs$CUSTOM$.log</logFilePath>
			<!-- Log file delimiter [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter>PIPE</logDelimiter>
			<!-- Append results to existing log (yes) or overwrite existing log (no) -->
			<logAppend>no</logAppend>

			<!-- These are the two summary execution log files to be compared. -->
			<logFilePath1>%MIGRATION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER1/$ENV_TYPE$_PerfTest$CUSTOM$.log</logFilePath1>
			<logFilePath2>%MIGRATION_TEST_OUTPUT%/MyProject1SubProj/$RELEASE_FOLDER2/$ENV_TYPE$_PerfTest$CUSTOM$.log</logFilePath2>

			<!-- Log file 1 and 2 delimiters [COMMA\,\PIPE\|\TAB\TILDE\~] -->
			<logDelimiter1>PIPE</logDelimiter1>
			<logDelimiter2>PIPE</logDelimiter2>

			<!-- Default duration delta for all queries.  When the difference between duration in file2 and file1 is greater than the default duration then it is an error (outside acceptable range). -->
			<durationDelta>000 00:00:01.0000</durationDelta>
		</compareLogs>
	</regressionTest>

	<!--Element regressionQueries is optional-->
	<regressionQueries>
		<regressionQuery>
			<datasource></datasource>
			<query></query>
		</regressionQuery>
	</regressionQueries>

</p1:RegressionModule>
