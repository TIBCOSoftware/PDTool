######################################################################
# (c) 2014 Cisco and/or its affiliates. All rights reserved.
# 
# This software is released under the Eclipse Public License. The details can be found in the file LICENSE. 
# Any dependent libraries supplied by third parties are provided under their own open source licenses as 
# described in their own LICENSE files, generally named .LICENSE.txt. The libraries supplied by Cisco as 
# part of the Composite Information Server/Cisco Data Virtualization Server, particularly csadmin-XXXX.jar, 
# csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar, csext-XXXX.jar, csjdbc-XXXX.jar, 
# csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar, and customproc-XXXX.jar (where -XXXX is an 
# optional version number) are provided as a convenience, but are covered under the licensing for the 
# Composite Information Server/Cisco Data Virtualization Server. They cannot be used in any way except 
# through a valid license for that product.
# 
# This software is released AS-IS!. Support for this software is not covered by standard maintenance agreements with Cisco. 
# Any support for this software by Cisco would be covered by paid consulting agreements, and would be billable work.
# 
######################################################################
#==============================================================================
# PDTool Project Environment Variables
#
# General Instructions
# 1. Always use forward slashes for both Windows and Unix paths and URLs
# 2. Variables may use $ or % notations.  It is not operating system specific
# 3. Variables may resolve to this property file, Java Environment (-DVAR=val) or the System Environment variables
# 4. Surround variables with two $ or two % when concatenating strings (e.g. $VCS_TYPE$_cisVcsTemp)
#==============================================================================
#
#==============================================================================
# Customer-defined Environment Variables 
#   Note: May be used in the orchestration property file.
#   This section may not be used with ANT Deploy.
#==============================================================================
EXPECTED_VCS_RESULT19=PASS
CARFILE=testout.car
#
# Used by Regression Module query :: SELECT "$$Status" FROM ViewSales2 WHERE "$$Status" = '$VIEWSALES_STATUS'
VIEWSALES_STATUS=open
# Used by Regression Module query :: SELECT * FROM ViewSales2 WHERE ProductName like '$PRODUCT_NAME_WILDCARD'
#   SQL Wildcards must be escaped with two % so that it is not interpreted as a variable.
PRODUCT_NAME_WILDCARD=Widget%%
#
# CIS Repository port
set CIS_REPO_PORT=9408
# CIS Repository JDBC Type.  Used for the datasource URL string: "mysql" in 6.2 and "postgresql" in 7.0
set CIS_JDBC_TYPE=mysql
# CIS Repository catalog name.  Used for the datasource path in ds_orders: blank in 6.2. "tutorial/" in 7.0.
set CIS_CATALOG=
#
# Used to define the SERVERID
#   for HTTP set WSPORT=9400
#   for HTTPS set WSPORT=9402
CIS_PORT=9400
# The web service port. 9400 when HTTP, 9402 when HTTPS
CIS_PORT_WS=9400
#
# HTTP_TYPE is set in the OS prior to execution giving greater flexibility to choose at runtime.  
#    set HTTP_TYPE=http to connect over regular http.
#    set HTTP_TYPE=https to connect PDTool over SSL (htts).
# This is used to compose the SERVERID for selecting the correct servers.xml id.
CIS_HTTP_TYPE=http
#
# Provides an easy way to customize which CIS server entry [servers.xml] to use to connect to a CIS instance.
SERVERID=localhost%CIS_PORT%$CIS_HTTP_TYPE$
#
# Server environment for the LabPD-Deploy
LAB_SERVERID=lab%CIS_PORT%$CIS_HTTP_TYPE$
#
# VCS Connection variable - identifies a VCONN id in VCSModule.xml
VCONN=git01_unix
# The base folder in CIS where the long path is located
VCS_BASE_TYPE=GIT
#
#==============================================================================
# Behavior Environment Variables [default values set]
#==============================================================================
# Suppress [true|false] printing PDTool orchestration comments to the log
SUPPRESS_COMMENTS=true
#
# DEBUG=true|false :: Turn on when debugging this script
# Debug Level 1: Debug PDTool script only
DEBUG1=true
# Debug Level 2: Debug ExecuteAction, executeVcs
DEBUG2=false
# Debug Level 3: Debug 3rd level scripts invoked from ExecuteAction and executeVcs
DEBUG3=true
# Diffmerger Verbose allows the VCS Diffmerger process to output more information when set to true [Default=true]
DIFFMERGER_VERBOSE=true
#
# The property order of precedence defines which properties are retrieved in what order.
#   JVM - These are properties that are set on the JVM command line with a -DVAR=value
#   PROPERTY_FILE - These are the variables set in the configuration property file like deploy.properties or in the VCSModule.xml
#   SYSTEM - These are variables that are set in batch files in the operating system prior to invocation of PDTool.
# If left blank, the default=JVM PROPERTY_FILE SYSTEM
# However, it may be necessary to be able to override what is in the property file and pick up an environment variable first.
# propertyOrderPrecedence=JVM SYSTEM PROPERTY_FILE
propertyOrderPrecedence=
#
# Used when parsing property file and processing the moduleId list
allResourcesIndicator=*
exculdeResourcesIndiator=-
#
# userOptionThreshold - The threshold of the number of users where it is more efficient to retrieve all users at once (option 1) 
#		If the number of users to be processed in the UserModule XML file exceeds the threshold then use option 1.
#		Retrieve the entire CIS user list in one invocation. This options requires storing all CIS user and domain in memory.  
#       If there are 1000's of users, this could take a lot of memory.
#       To use this option, determine how many users are in your composite domain and set the threshold to that value or greater.
# vs. 
# calling the API to retrieve a user for each user found in the UserModule.xml (option 2) 
#		If the number of users to be processed in the UserModule XML file is less than the threshold then use option 2.
#		Retrieve the user info on each invocation of a user found in the UserModule.xml.
#		This requires a web service invocation to the CIS server for each user to be processed.
#       A threshold of 0 will cause the invocation of the user API one at a time.
userOptionThreshold=0
#
# Listing of DataSourceModule generic attributes that are not updateable 
DataSourceModule_NonUpdateableAttributes=
#
# Listing of ServerAttributeModul generic attributes that are not updateable 
ServerAttributeModule_NonUpdateableAttributes=
#
# Listing of DomainModule generic attributes that are not updateable 
DomainModule_NonUpdateableAttributes=
#
# This provides an externalized mechanism to teach PD Tool about new Resource Types and how 
# they are associated with the basic VCS Resource Types.  The basic VCS Resource Types include:
#    folder,definitions,link,procedure,table,tree,trigger
#
# Each Studio Resource contains an info tab with a resource path and a display type.
# Use the Resource path in the info tab as input into the following Studio Web Service API
# to discover the CIS Resource Type.
#   /services/webservices/system/admin/resource/operations/getResource()
#
# The CIS Resource Type is mapped to one of the basic VCS Resource Types provided above.
# Finally, provide the name value pair in the form of "VCS Resource Type=Studio Display Resource Type"
# Create a comma separated list of these name=value pairs.  For example:
# folder=Data Source,folder=Composite Database,procedure=Basic Transformation
#
VCSModule_ExternalVcsResourceTypeList=
#
# CIS_PING_SERVER:  Allows the user to control whether the server performs a ping on CIS prior to executing the actual command.
#            The default is true if this variable is not set or does not exist.  This will override all settings.
CIS_PING_SERVER=false
#
# CIS_CONNECT_RETRY: Allows the user to set the number of retries to connect to CIS before throwing an error.
#                    The default is 1 if this variable is not set or does not exist.
CIS_CONNECT_RETRY=3
#
# CIS_CONNECT_RETRY_SLEEP: Number of milliseconds to sleep on connection retry
CIS_CONNECT_RETRY_SLEEP_MILLIS=5000
#------------------------------------------------------------------------------
#
#==============================================================================
# VCS Environment Variables [Optional]
#==============================================================================
# Note: If you are not using VCS then it is not necessary to set these variables
#
#----------------------------------------------------------
# VCS Topology Scenarios
#----------------------------------------------------------
# Instructions:
# There are four VCS scenarios described below.  What is important is
# whether the VCS Multi-User [Direct VCS Access] Topology is being used (true) or not (false).
# The default is to set VCS_MULTI_USER_TOPOLOGY=false.
# -------------------------------------------------
# 1. Single-Node Topology
# -------------------------------------------------
# Single-Node refers to a the scenario where a single Studio or PD Tool user is connected to their own 
# CIS development server and the Studio user or PD Tool client has the ability to check-in their own CIS 
# resources to a VCS repository.
# -------------------------------------------------
# 2. Multi-Node Topology
# -------------------------------------------------
# Multi-Node refers to a the scenario where each Studio user or PD Tool client is connected to their own 
# CIS development server and *EACH* Studio user or PD Tool client has the ability to check-in their own 
# CIS resources to the central VCS repository.
# -------------------------------------------------
# 3. Multi-user Topology [Managed VCS Access]
# -------------------------------------------------
# Multi-user Managed VCS Access refers to a the scenario where multiple Studio users or PD Tool clients are connected 
# to a central CIS development server and only one *MANAGED* Studio user or PD Tool client has the ability to check-in 
# CIS resources to the VCS repository.  Therefore, the check-in process is managed through a single control point.
# -------------------------------------------------
# 4. Multi-user Topology [Direct VCS Access]
# -------------------------------------------------
# Multi-user Direct VCS Access refers to a the scenario where multiple Studio users or PD Tool clients are directly 
# connected to a central CIS development server and all Studio users or PD Tool clients have the ability to 
# *DIRECTLY* check-in CIS resources to the VCS repository.  This scenario "requires" that forced_checkin be called 
# so that the each individual workspace is synchronized with the central CIS repository first and then the 
# VCS scripts perform a diffmerger to determine what to check-in to the VCS repository.   In this scenario, 
# the Studio user or PD Tool client is automatically redirected from the check-in process to the forced_checkin process 
# even the Studio user does not check the forced check-in box.  This is required for this scenario.
# -------------------------------------------------
# Set the Topology mode here:
# -------------------------------------------------
VCS_MULTI_USER_TOPOLOGY=false
#
#-------------------
# VCS_TYPE - The type of VCS being used [svn, p4, cvs, tfs2005, tfs2010, git, etc]
#   Note: This gets added to the end of the VCS_WORKSPACE_HOME folder for workspace clarification
#     Subversion=svn
#     Perforce=p4
#     Concurrent Versions Systems=cvs
#     Team Foundation Server=tfs2005 or [tfs2010, tfs2012, tfs2013]
#     Git=git
VCS_TYPE=git
# VCS_BASE_TYPE - Recommended options=[SVN, CVS, P4, TFS, TFS, or GIT]. Choose to coincide with VCS_TYPE.
#     This can be used as a default option when constructing the VCS_WORKSPACE_NAME and VCS_TEMP_DIR name.
VCS_BASE_TYPE=GIT
#-------------------
#
#-------------------
# VCS_HOME - VCS Client Home directory where the VCS executable lives.  
#     Note: This could be a /bin directory.  It must be where the VCS_COMMAND is found.
#     Windows example: D:/dev/vcs/csvn/bin or D:\\dev\\vcs\\csvn\\bin
#        UNIX example: /usr/bin
VCS_HOME=/usr/bin
#-------------------
#
#-------------------
# VCS_COMMAND - The actual command for the given VCS Type [svn,p4,cvs]
VCS_COMMAND=git
#
# VCS_FULL_COMMAND - [true|false] - Execute the VCS command with the full path (true) or the VCS command only (false)
#                    When set to false, the VCS_COMMAND must be in the system path
VCS_EXEC_FULL_PATH=true
#-------------------
#
#-------------------
# VCS options - options are specific to the VCS type being used and are included in the command line (not set as environment variables)
#     Subversion examples: --non-interactive --no-auth-cache --trust-server-cert --config-dir c:\
VCS_OPTIONS=

# Workspace Initialization.  Create new workspace equates to: 
#		TFS: tf workspace -new -collection:${VCS_REPOSITORY_URL} ${VCS_WORKSPACE_NAME} -noprompt /login:${VCS_USERNAME},${VCS_PASSWORD} ${VCS_OPTIONS} ${VCS_WORKSPACE_INIT_NEW_OPTIONS}
#		       e.g. E:/dev/vcs/TEE-CLC-11.0.0/tf.cmd workspace -new -collection:http://hostname:8080/tfs/DefaultCollection wks -noprompt /login:user,******** /location:server 
#		SVN: not applicable
#		 P4: not applicable
#		CVS: not applicable
#       GIT: not applicable
VCS_WORKSPACE_INIT_NEW_OPTIONS=

# Workspace Initialization.  Link workspace to VCS repository equates to: 
#		TFS: tf.cmd workfold -map -collection:{VCS_REPOSITORY_URL} ${TFS_SERVER_URL} ${VCS_WORKSPACE_DIR}+"/"+${VCS_PROJECT_ROOT} -workspace:${VCS_WORKSPACE_NAME} -noprompt /login:${VCS_USERNAME},${VCS_PASSWORD} ${VCS_OPTIONS} ${VCS_WORKSPACE_INIT_LINK_OPTIONS}
#			   e.g. E:/dev/vcs/TEE-CLC-11.0.0/tf.cmd workfold -map -collection:http://hostname:8080/tfs/DefaultCollection $/Composite_62/cis_objects W:/wks/Composite_62/cis_objects -workspace:wks -noprompt /login:user,********
#		SVN: svn import -m "linking workspace to the VCS repository" . "${VCS_REPOSITORY_URL}/${VCS_PROJECT_ROOT}" ${SVN_OPTIONS} ${SVN_AUTH} ${VCS_WORKSPACE_INIT_LINK_OPTIONS}
#				-IGNORE_INIT_LINK - This option is used to ignore this step when users have READ-only access and will only be doing check-out from subversion and not check-in.		#		 P4: (UNIX) p4 client -o ${VCS_WORKSPACE_INIT_LINK_OPTIONS} | p4 client -i ${VCS_WORKSPACE_INIT_LINK_OPTIONS}
#		 P4: (UNIX) p4 client -o ${VCS_WORKSPACE_INIT_LINK_OPTIONS} | p4 client -i ${VCS_WORKSPACE_INIT_LINK_OPTIONS}
#		 P4: (Windows) p4 client workspacename ${VCS_WORKSPACE_INIT_LINK_OPTIONS}          [manual intervention is required to acknowledge this action on windows only.]
#		CVS: cvs import -m "linking workspace to the VCS repository" ${VCS_PROJECT_ROOT} INITIAL start ${VCS_WORKSPACE_INIT_LINK_OPTIONS}
#       GIT: git clone -n ${GIT_OPTIONS} ${VCS_WORKSPACE_INIT_LINK_OPTIONS} ${VCS_REPOSITORY_URL} .
VCS_WORKSPACE_INIT_LINK_OPTIONS=

# Workspace Initialization.  Get resources from VCS repository equates to: 
#		TFS: tf.cmd get -all -recursive ${TFS_SERVER_URL} -noprompt /login:${VCS_USERNAME},${VCS_PASSWORD} ${VCS_OPTIONS} {$VCS_WORKSPACE_INIT_GET_OPTIONS}
#			   e.g. E:/dev/vcs/TEE-CLC-11.0.0/tf.cmd get -all -recursive $/Composite_62/cis_objects -noprompt /login:user,********
#		SVN: svn co "${VCS_REPOSITORY_URL}/${VCS_PROJECT_ROOT}" ${SVN_OPTIONS} ${SVN_AUTH} ${VCS_WORKSPACE_INIT_GET_OPTIONS}
#		 P4: p4 sync ${VCS_WORKSPACE_INIT_GET_OPTIONS}
#		CVS: cvs co ${VCS_PROJECT_ROOT} ${VCS_WORKSPACE_INIT_GET_OPTIONS}
#       GIT: git checkout ${GIT_OPTIONS} ${VCS_WORKSPACE_INIT_GET_OPTIONS} ${VCS_PROJECT_ROOT}
#              use VCS_WORKSPACE_INIT_GET_OPTIONS to set the "tree-ish" value (the branch in most cases) to check out. will default to "master" if not set
#              e.g. /usr/local/bin/git checkout master cis_objects
VCS_WORKSPACE_INIT_GET_OPTIONS=master

# VCS Base Folder Initialization.  Add Options: 
#		TFS: tf.cmd add ${fullResourcePath} -recursive -noprompt /login:${VCS_USERNAME},${VCS_PASSWORD} ${VCS_OPTIONS} ${VCS_BASE_FOLDER_INIT_ADD}
#			   e.g. E:/dev/vcs/TEE-CLC-11.0.0/tf.cmd add P:/TFSww/Composite_62/cis_objects/shared/test00  $/Composite_62/cis_objects -noprompt /login:user,********
#		SVN: svn add ${fullResourcePath} ${SVN_AUTH} ${VCS_OPTIONS} ${VCS_BASE_FOLDER_INIT_ADD}
#		 P4: p4 add ${fullResourcePath} ${VCS_BASE_FOLDER_INIT_ADD}
#		CVS: cvs add ${fullResourcePath} ${VCS_BASE_FOLDER_INIT_ADD}
#       GIT: git add ${VCS_OPTIONS} ${VCS_BASE_FOLDER_INIT_ADD} ${fullResourcePath}
VCS_BASE_FOLDER_INIT_ADD=

# Resource Checkin. Checkin resources to VCS equates to:
#		TFS: 
#			Folder:             fullResourcePath:  execFromDir+"/"+resourcePath"
#					Check out folder for editing:  tf.cmd checkout ${fullResourcePath} -lock:Checkout -recursive -noprompt /login:${VCS_USERNAME},${VCS_PASSWORD} ${VCS_OPTIONS} ${VCS_CHECKOUT_OPTIONS}
#					             Check in folder:  tf.cmd checkin ${fullResourcePath} -comment:@${filename} -recursive -noprompt /login:${VCS_USERNAME},${VCS_PASSWORD} ${VCS_OPTIONS} ${VCS_CHECKIN_OPTIONS}
#		      File:             fullResourcePath:  execFromDir+"/"+resourcePath+"_"+resourceType+".cmf"
#					  Check out file for editing:  tf.cmd checkout ${fullResourcePath} -lock:Checkout -noprompt /login:${VCS_USERNAME},${VCS_PASSWORD} ${VCS_OPTIONS} ${VCS_CHECKOUT_OPTIONS}
#								   Check in file:  tf.cmd checkin ${fullResourcePath} -comment:@${filename} -noprompt /login:${VCS_USERNAME},${VCS_PASSWORD} ${VCS_OPTIONS} ${VCS_CHECKIN_OPTIONS}
#		SVN: 
#			Folder:             fullResourcePath:  execFromDir+"/"+resourcePath"
#					             Check in folder:  svn commit ${fullResourcePath} -m "${Message}" ${SVN_AUTH} ${VCS_OPTIONS} ${VCS_CHECKIN_OPTIONS}
#		      File:             fullResourcePath:  execFromDir+"/"+resourcePath+"_"+resourceType+".cmf"
#								   Check in file:  svn commit ${fullResourcePath} -m "${Message}" ${SVN_AUTH} ${VCS_OPTIONS} ${VCS_CHECKIN_OPTIONS}
#		 P4: 
#			Folder:             fullResourcePath:  execFromDir+"/"+resourcePath"
#					             Check in folder:  p4 submit -d "${Message}" ${fullResourcePath} ${VCS_CHECKIN_OPTIONS}
#		      File:             fullResourcePath:  execFromDir+"/"+resourcePath"
#								   Check in file:  p4 submit -d "${Message}" ${fullResourcePath} ${VCS_CHECKIN_OPTIONS}
#		CVS: 
#			Folder:             fullResourcePath:  execFromDir+"/"+resourcePath"
#					             Check in folder:  cvs commit -m "${Message}" ${fullResourcePath} ${VCS_CHECKIN_OPTIONS}
#		      File:             fullResourcePath:  execFromDir+"/"+resourcePath+"_"+resourceType+".cmf"
#								   Check in file:  cvs commit -m "${Message}" ${fullResourcePath} ${VCS_CHECKIN_OPTIONS}
#       GIT: 
#           Folder:             fullResourcePath:  execFromDir+"/"+resourcePath"
#                                Check in folder:  git commit -m "${Message}" ${VCS_OPTIONS} ${VCS_CHECKIN_OPTIONS} ${fullResourcePath}
#             File:             fullResourcePath:  execFromDir+"/"+resourcePath+"_"+resourceType+".cmf"
#                                  Check in file:  git commit -m "${Message}" ${VCS_OPTIONS} ${VCS_CHECKIN_OPTIONS} ${fullResourcePath}
# Check-in options are specific to the commit part of the command.  For example, TFS might be -associate:1 which associates a work item with a submission.
VCS_CHECKIN_OPTIONS=
# A comma separated list of base-level commands that are required for checkin.  VCS_CHECKIN_OPTIONS is validated against this list.  
# For example, it may be required by TFS to have the -associate command present on the check-in command line.
VCS_CHECKIN_OPTIONS_REQUIRED=

# Resource Checkout. Checkout resources to VCS equates to:
#		TFS: 
#			Folder:             fullResourcePath:  execFromDir+"/"+resourcePath"
#					            Check out folder:  tf.cmd get ${fullResourcePath} -version:${Revision} -recursive -noprompt /login:${VCS_USERNAME},${VCS_PASSWORD} ${VCS_OPTIONS} ${VCS_CHECKOUT_OPTIONS}
#		      File:             fullResourcePath:  execFromDir+"/"+resourcePath+"_"+resourceType+".cmf"
#					              Check out file:  tf.cmd get ${fullResourcePath} -version:${Revision} -noprompt /login:${VCS_USERNAME},${VCS_PASSWORD} ${VCS_OPTIONS} ${VCS_CHECKOUT_OPTIONS}
#		SVN: 
#			Folder:             fullResourcePath:  execFromDir+"/"+resourcePath"
#					            Check out folder:  svn update ${fullResourcePath} -r ${Revision} ${SVN_AUTH} ${VCS_OPTIONS} ${VCS_CHECKOUT_OPTIONS}
#		      File:             fullResourcePath:  execFromDir+"/"+resourcePath+"_"+resourceType+".cmf"
#					              Check out file:  svn update ${fullResourcePath} -r ${Revision} ${SVN_AUTH} ${VCS_OPTIONS} ${VCS_CHECKOUT_OPTIONS}
#		 P4: 
#			Folder:             fullResourcePath:  execFromDir+"/"+resourcePath"
#					            Check out folder:  current:  p4 sync ${VCS_CHECKOUT_OPTIONS}
#												   revision: p4 sync @${Revision} ${VCS_CHECKOUT_OPTIONS}
#		      File:             fullResourcePath:  execFromDir+"/"+resourcePath+"_"+resourceType+".cmf"
#					              Check out file:  current:  p4 sync "${fullResourcePath}" ${VCS_CHECKOUT_OPTIONS}
#												   revision: p4 sync "${fullResourcePath}@${Revision}" ${VCS_CHECKOUT_OPTIONS}
#		CVS: 
#			Folder:             fullResourcePath:  execFromDir+"/"+resourcePath"
#					            Check out folder:  cvs update -j${Revision} ${fullResourcePath} ${VCS_CHECKOUT_OPTIONS}
#		      File:             fullResourcePath:  execFromDir+"/"+resourcePath+"_"+resourceType+".cmf"
#					              Check out file:  cvs update -j${Revision} ${fullResourcePath} ${VCS_CHECKOUT_OPTIONS}
#       GIT: 
#           Folder:             fullResourcePath:  execFromDir+"/"+resourcePath"
#                               Check out folder:  git checkout ${VCS_OPTIONS} ${VCS_CHECKOUT_OPTIONS} ${fullResourcePath}
#             File:             fullResourcePath:  execFromDir+"/"+resourcePath+"_"+resourceType+".cmf"
#                                 Check out file:  git checkout ${VCS_OPTIONS} ${VCS_CHECKOUT_OPTIONS} ${fullResourcePath}
VCS_CHECKOUT_OPTIONS=
# A comma separated list of base-level commands that are required for checkout.  VCS_CHECKOUT_OPTIONS is validated against this list.
VCS_CHECKOUT_OPTIONS_REQUIRED=

# VCS Resource Import Options:
#   Occurs during a vcsCheckout when the temporary checkout.car file is imported into the target server.
#   The import is the final step in the process.  The backwards compatible option is to include access: -includeaccess 
#   Consult the Archive Module documentation for more options.
VCS_CIS_IMPORT_OPTIONS=-includeaccess

# VCS Resource Export Options:
#   Occurs during a vcsCheckin when the temporary checkout.car file is exported from the target server.
#   The export from the target is used to compare resources against the VCS repository.  The backwards compatible option is leave this option blank.
#   Consult the Archive Module documentation for more options.
VCS_CIS_EXPORT_OPTIONS=

#-------------------
#
#-------------------
# VCS_REPOSITORY_URL - This is the base URL to identify the VCS server.
#     Note:  The scripts use the combination of the VCS_REPOSITORY_URL and 
#            the VCS_PROJECT_ROOT to identify the baseline to check-in and checkout
#            in the VCS.  The VCS_PROJECT_ROOT also gets used in the folder structure
#            of the local workspace.
#     subversion - The base HTTP URL in subversion 
#                  Command Format: [http:////hostname.domain/svn/basename]
#                         Example: http:////myhost/svn/sandbox/PDTOOL/$CIS_VERSION
#
#     perforce   - The Repository URL is the host and port in perforce - 
#                  Command Format: [hostname:port]
#                         Example: myhost:1666
#
#     cvs        - Command Format: [:method:][[user][:password]@]hostname[:[port]]/repository_path
#                  1) Local access only with no host and port
#                         Example: :local:/home/cvs
#                  2) Remote access rules and examples:
#                      (1) There is no colon ":" following the port.
#                      (2) There is a colon ":" following the hostname if there is no port.
#                      (3) The repository folder path on the CVS server follows the port if present or hostname.
#                      (4) Username and Password are included in this URL therefore VCS_USERNAME and VCS_PASSWORD are ignored.
#                      Example: :pserver:user1:password@remotehost:2401/home/cvs
#                      Example: :pserver:user1:password@remotehost:/home/cvs
#                      Example: :pserver:user1@remotehost:/home/cvs
#                  3) Use substitution variables to identify user and password.  These variables get replaced at runtime with values passed in.
#                      Example: :pserver:<VCS_USERNAME>:<VCS_PASSWORD>@myhost:2401/home/cvs
#
#     TFS - The base HTTP URL in Team Foundation Server 
#                  Command Format: [http:////hostname.domain:8080/tfs/basename]
#                         Example: http:////myhost:8080/tfs/TeamCollection/TeamProject
#
#     git - The base URL in Git. Git supports a number of protocols.
#                  1) Local access only with no host and port
#                      Example: /path/to/repo/
#                      Example: file:///path/to/repo/
#                  2) Remote access rules and examples:
#                      (1) Username and/or Password are included in this URL therefore VCS_USERNAME and VCS_PASSWORD are ignored. The git protocol does not use authentication.
#                      Example: ssh://user1@remotehost:22/path/to/repo.git/
#                      Example: git://remotehost:1234/path/to/repo.git/
#                      Example: http://user1:password@remotehost:80/path/to/repo.git/
#                      Example: https://user1:password@remotehost:443/path/to/repo.git/
#                      Example: ftp://user1:password@remotehost:21/path/to/repo.git/
#                      Example: ftps://user1:password@remotehost:990/path/to/repo.git/
#                      Example: rsync://user1:password@remotehost:873/path/to/repo.git/
#                  3) Use substitution variables to identify user and password.  These variables get replaced at runtime with values passed in.
#                      Example: http://<VCS_USERNAME>:<VCS_PASSWORD>@remotehost:80/path/to/repo.git/
#
VCS_REPOSITORY_URL=https://github.com/$GIT_VCS_USERNAME/$GIT_VCS_PROJECT.git
#-------------------
#
#-------------------
# VCS_PROJECT_ROOT - This is root name of the project on the VCS Server
#     subversion - The project name
#     perforce   - The depot name
#     cvs        - Project Folder
#     TFS        - Team Project Folder
#     git        - Project Folder
VCS_PROJECT_ROOT=cis_objects
#-------------------
#
#-------------------
# VCS_WORKSPACE_HOME - This is the CIS VCS Workspace Home.  
#     It is recommended to set the location to PDTool home [e.g. $PROJECT_HOME].
#     The user does have the flexibility to place the VCS workspace in a location other than PDTool home. [e.g. $APPDATA] 
VCS_WORKSPACE_HOME=$PROJECT_HOME
#
# VCS_WORKSPACE_NAME:: The name of the workspace folder.  This is not a directory but simply a name. The shorter the better. 
#    If running PDTool on the same machine as PDToolStudio then the workspace names should be different.
#    Variables can be used to construct the name. Surround variables with 2 $ or 2 % signs when concatenating strings.
#       e.g. $VCS_TYPE$_workspace - $VCS_TYPE$ gets evaluated as a variable. _workspace is a string that gets concatentated. Result: svn_workspace
#    For perforce, make sure all instances of PDToolStudio/PDTool use there own workspace name in the event that you have them installed in more than one place.
#       Suggestions:  Use _w=windows: [$VCS_TYPE$_wworkspace].  Use _u for UNIX: [$VCS_TYPE$_uworkspace].  Use _s for studio: [$VCS_TYPE$_sworkspace].
# VCS_WORKSPACE_DIR::  VCS Workspace Dir is a combination of the VCS_WORKSPACE_HOME and a workspace directory name "VCS_WORKSPACE_NAME".  
# VCS_TEMP_DIR::       VCS Temp Dir is a combination of the VCS_WORKSPACE_HOME and a temp dir name such as $VCS_TYPE$_temp.
VCS_WORKSPACE_NAME=$VCS_BASE_TYPE$uw
VCS_WORKSPACE_DIR=$VCS_WORKSPACE_HOME/$VCS_WORKSPACE_NAME
VCS_TEMP_DIR=$VCS_WORKSPACE_HOME/$VCS_BASE_TYPE$t
#-------------------
#
#-------------------
# VCS_USERNAME - (optional) This is the username for the user logging into the VCS Server.  
#    If VCS_USERNAME is not set, then the specific VCS Server type may prompt the user for a username and password each time.  
#    Some VCS Servers, will ask to store the user and password locally for subsequent use.
VCS_USERNAME=$GIT_VCS_USERNAME
#-------------------
#
#-------------------
# VCS_PASSWORD - (optional) This is the password for the user logging into the VCS Server.  
#    If VCS_USERNAME is not set, VCS_PASSWORD is ignored.
#    If set in this file, execute the following command to encrypt the password:
#         Unix: ./ExecutePDTool.sh -encrypt ../resources/config/deploy.properties
#      Windows: ExecutePDTool.bat -encrypt ../resources/config/deploy.properties
VCS_PASSWORD=$GIT_VCS_PASSWORD
#-------------------
#
#-------------------
# VCS_IGNORE_MESSAGES - A comma separated list of messages for the VCS Module to ignore upon execution.
#    CVS:
#    Perforce:    	No files to submit
#    Subversion: 	No files to submit,Could not add all targets because some targets are already versioned
#    TFS: 			No files checked in,could not be retrieved because a writable file by the same name exists,already has pending changes,because it already has a pending change that is not compatible,There are no remaining changes to check in,No arguments matched any files to add
#    Git:          Could not switch to,did not match any file(s) known to git.,nothing to commit
VCS_IGNORE_MESSAGES=Could not switch to,did not match any file(s) known to git.,nothing to commit
#-------------------
#
#-------------------
# VCS_MESSAGE_PREPEND - A static message that gets prepended onto all check-in or forced check-in messages
VCS_MESSAGE_PREPEND=
#-------------------
#------------------------------------------------------------------------------
#
#==============================================================================
#### [SUBVERSION] USER MODIFIES [OPTIONAL] #####
# Subversion [svn] specific environment variables are set here
#==============================================================================
# Subversion editor for messages
# [Default-change if desired but must be in path (UNIX:vi, Windows: notepad) ]
SVN_EDITOR=vi
#
# SVN_ENV tells the system which SVN environment variables need to be set at execution time
SVN_ENV=SVN_EDITOR
#------------------------------------------------------------------------------
#
#==============================================================================
#### [PERFORCE] USER MODIFIES [OPTIONAL] #####
# Perforce [p4] specific environment variables are set here
#==============================================================================
# Perforce editor for messages
# [Default-change if desired but must be in path (UNIX:vi, Windows: notepad)]
P4EDITOR=vi
# P4CLIENT must contain "exactly" the same folder name that is defined at the end of VCS_WORKSPACE_DIR which is also VCS_WORKSPACE_NAME
# example:  If [ VCS_WORKSPACE_DIR=$VCS_WORKSPACE_HOME/$VCS_TYPE$_workspace ] then P4CLIENT=svn_workspace
P4CLIENT=$VCS_WORKSPACE_NAME
# example: set P4PORT=localhost:1666 
# [Default-do not change]
P4PORT=$VCS_REPOSITORY_URL
# The environment must be set with the default username 
# example: set P4USER=<VCS_USERNAME>
# example: set P4PASSWD=<VCS_PASSWORD>
# [Default-do not change] - Use substitution variables to identify user and password.  
#                           These variables get replaced at runtime with values passed in.
P4USER=<VCS_USERNAME>
P4PASSWD=<VCS_PASSWORD>
#
# P4_ENV tells the system which P4 environment variables need to be set at execution time
P4_ENV=P4CLIENT,P4PORT,P4USER,P4PASSWD,P4EDITOR
#
# Perforce Delete Workspace Link options
# Space separated list of options to pass into the command to delete the workspace link between the file system and Perforce Depot repository.
# In the example below -f is shown as the optional option.  If P4DEL_LINK_OPTIONS is left blank then "p4 client -d ${VCS_WORKSPACE_NAME}" is executed.
# p4 client [-f] -d ${VCS_WORKSPACE_NAME}
#   -f is a force delete.  Some clients may not want to force the delete.
P4DEL_LINK_OPTIONS=-f
#------------------------------------------------------------------------------
#
#==============================================================================
#### [CVS] USER MODIFIES [OPTIONAL] #####
# Concurrent Versions System [cvs] specific environment variables are set here
#==============================================================================
# Example: set CVSROOT=:local:c:\dev\cvs\cvsrep
# [Default-do not change]
CVSROOT=$VCS_REPOSITORY_URL
# Example: Set the remote shell login when logging into a remote host
# [Default-do not change]
CVS_RSH=ssh
#
# CVS_ENV tells the system which CVS environment variables need to be set at execution time
CVS_ENV=CVSROOT,CVS_RSH
#------------------------------------------------------------------------------
#
#==============================================================================
#### [TEAM FOUNDATION SERVER] USER MODIFIES [OPTIONAL] #####
# Team Foundation Server [tfs] specific environment variables are set here
#==============================================================================
# TFS editor for messages
# [Default-change if desired but must be in path (UNIX:vi, Windows: notepad) ]
TFS_EDITOR=notepad
#
# Use an existing TFS workspace.  This will not create a separate workspace for 
# VCS integration. If this is true, CIS will only copy to/from the workspace and
# not check into TFS. It will record add, edits and deletes in the workspace.
# This allows for tools like Visual Studio to perform the actual check-in to TFS.  
TFS_USE_EXISTING_WORKSPACE=false
#
# TFS_ENV tells PD Tool which TFS environment variables need to be set at execution time
TFS_ENV=TFS_EDITOR,TFS_USE_EXISTING_WORKSPACE
#
# TFS Server URL.  Use $$ to escape the required beginning $. e.g. $$/TeamProject/cis_objects
TFS_SERVER_URL=$$
#
#------------------------------------------------------------------------------
#
#==============================================================================
#### [GIT] USER MODIFIES [OPTIONAL] #####
# Git [git] specific environment variables are set here
#
# WARNING: Do not set variables that are not needed. Git will exhibit strange 
#          behaviors if you do.
#==============================================================================
#
# Specifies a path to use instead of the default .git for the base of the
# repository. The --git-dir command-line option also sets this value.
GIT_DIR=
#
# Allows the specification of an alternate index file. If not specified, the default of $GIT_DIR/index is used.
GIT_INDEX_FILE=
#
# If the object storage directory is specified via this environment variable then the sha1 directories 
# are created underneath - otherwise the default $GIT_DIR/objects directory is used.
GIT_OBJECT_DIRECTORY=
#
# Due to the immutable nature of Git objects, old objects can be archived into shared, read-only directories. This variable
# specifies a ":" separated (on Windows ";" separated) list of Git object directories which can be used to search for Git
# objects. New objects will not be written to these directories.
GIT_ALTERNATE_OBJECT_DIRECTORIES=
#
# Set the path to the root of the working tree. This can also be controlled by the --work-tree command line option and the
# core.worktree configuration variable.
GIT_WORK_TREE=
#
# Set the Git namespace; see gitnamespaces documentation for details. The --namespace command-line option also sets this value.
GIT_NAMESPACE=
#
# This should be a colon-separated list of absolute paths. If set, it is a list of directories that Git should not chdir up
# into while looking for a repository directory (useful for excluding slow-loading network directories). It will not exclude
# the current working directory or a GIT_DIR set on the command line or in the environment. Normally, Git has to read the
# entries in this list and resolve any symlink that might be present in order to compare them with the current directory.
# However, if even this access is slow, you can add an empty entry to the list to tell Git that the subsequent entries are not
# symlinks and needn't be resolved; e.g., GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink.
GIT_CEILING_DIRECTORIES=
#
# When run in a directory that does not have ".git" repository directory, Git tries to find such a directory in the parent
# directories to find the top of the working tree, but by default it does not cross filesystem boundaries. This environment
# variable can be set to true to tell Git not to stop at filesystem boundaries. Like GIT_CEILING_DIRECTORIES, this will not
# affect an explicit repository directory set via GIT_DIR or on the command line.
GIT_DISCOVERY_ACROSS_FILESYSTEM=
#
# GIT_ENV tells the system which Git environment variables need to be set at execution time. Do not set variables that are
# set to blank or are otherwise not needed.
#GIT_ENV=GIT_DIR,GIT_INDEX_FILE,GIT_OBJECT_DIRECTORY,GIT_ALTERNATE_OBJECT_DIRECTORIES,GIT_WORK_TREE,GIT_NAMESPACE,GIT_CEILING_DIRECTORIES,GIT_DISCOVERY_ACROSS_FILESYSTEM
GIT_ENV=
#
#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
#### DO NOT MODIFY #####
#==============================================================================
# DeployTool System Environment Variables
#==============================================================================
# PDTool configuration directory locations
MODULE_HOME=$REGRESSION_HOME/modules
SUMMARY_LOG=$PROJECT_HOME/logs/summary.log
#
# SCHEMA_LOCATION - Provides a copy of the XML Schema which is used for validation purposes.
# 		For command line deployment, use of "../resources/schema/deployToolModules.xsd" will work.
#		For Eclipse debugging, use the fully qualified path "D:/dev/Workspaces/DeployToolWorkspace/PDTool/resources/schema/deployToolModules.xsd
SCHEMA_LOCATION=$PROJECT_HOME/resources/schema/deployToolModules.xsd
#
# Comma separated list of Resource Sub Types that are not considered rebindable
nonRebindableResourceSubTypeList=DATABASE_TABLE
#------------------------------------------------------------------------------
#